"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
class ClientManager {
    static async Init(client) {
        await client.login(config_1.Config.BOT_TOKEN);
        this.Client = client;
        client.on("guildCreate", guild => {
            console.log(`New server joined: ${guild.name} (Id: ${guild.id}). This server has ${guild.memberCount} members!`);
        });
        client.on("ready", () => {
            console.log(`Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} servers.`);
        });
    }
    static GetClient() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Client !== null && this.Client !== undefined) {
                    resolve(this.Client);
                }
            }, 100);
        });
    }
    static GetUser(discordId) {
        return new Promise(async (resolve, reject) => {
            const client = await this.GetClient();
            setInterval(() => {
                const user = client.users.get(discordId);
                if (user !== null && user !== undefined) {
                    resolve(user);
                }
            }, 1);
            setTimeout(() => {
                resolve(null);
            }, 10000);
        });
    }
}
exports.ClientManager = ClientManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQWtDO0FBR2xDLE1BQWEsYUFBYTtJQUdqQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFjO1FBQ3JDLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCxzQkFBc0IsS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRSxzQkFDL0MsS0FBSyxDQUFDLFdBQ1IsV0FBVyxDQUNaLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUNULHlCQUF5QixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksY0FDeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUNsQixnQkFBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FDOUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTO1FBQ3JCLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsV0FBVyxDQUFDLEdBQUcsRUFBRTtnQkFDZixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO29CQUNyRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN0QjtZQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUI7UUFDckMsT0FBTyxJQUFJLE9BQU8sQ0FBTyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ2pELE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3pDLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO29CQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2Y7WUFDSCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDTixVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNkLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQS9DRCxzQ0ErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQsIFVzZXIsIENvbGxlY3Rpb24gfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBCb3RQcmVzZW5jZSB9IGZyb20gXCIuL3ByZXNlbmNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGllbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgQ2xpZW50OiBDbGllbnQ7XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBJbml0KGNsaWVudDogQ2xpZW50KSB7XG4gICAgYXdhaXQgY2xpZW50LmxvZ2luKENvbmZpZy5CT1RfVE9LRU4pO1xuICAgIHRoaXMuQ2xpZW50ID0gY2xpZW50O1xuICAgIGNsaWVudC5vbihcImd1aWxkQ3JlYXRlXCIsIGd1aWxkID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgTmV3IHNlcnZlciBqb2luZWQ6ICR7Z3VpbGQubmFtZX0gKElkOiAke2d1aWxkLmlkfSkuIFRoaXMgc2VydmVyIGhhcyAke1xuICAgICAgICAgIGd1aWxkLm1lbWJlckNvdW50XG4gICAgICAgIH0gbWVtYmVycyFgXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgY2xpZW50Lm9uKFwicmVhZHlcIiwgKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXG4gICAgICAgIGBCb3QgaGFzIHN0YXJ0ZWQsIHdpdGggJHtjbGllbnQudXNlcnMuc2l6ZX0gdXNlcnMsIGluICR7XG4gICAgICAgICAgY2xpZW50LmNoYW5uZWxzLnNpemVcbiAgICAgICAgfSBjaGFubmVscyBvZiAke2NsaWVudC5ndWlsZHMuc2l6ZX0gc2VydmVycy5gXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRDbGllbnQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPENsaWVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5DbGllbnQgIT09IG51bGwgJiYgdGhpcy5DbGllbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodGhpcy5DbGllbnQpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRVc2VyKGRpc2NvcmRJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFVzZXI+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuR2V0Q2xpZW50KCk7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBjbGllbnQudXNlcnMuZ2V0KGRpc2NvcmRJZCk7XG4gICAgICAgIGlmICh1c2VyICE9PSBudWxsICYmIHVzZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodXNlcik7XG4gICAgICAgIH1cbiAgICAgIH0sIDEpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICB9LCAxMDAwMCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==