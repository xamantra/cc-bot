"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_data_1 = require("./../../data/subscription.data");
const user_data_1 = require("../../data/user.data");
const media_list_handler_1 = require("../../handlers/media.list.handler");
const search_list_1 = require("../../core/search.list");
const title_helper_1 = require("../../helpers/title.helper");
const sender_1 = require("./../../core/sender");
const subscription_model_1 = require("../../models/subscription.model");
const anime_cache_1 = require("../../core/anime.cache");
class UnsubFunction {
    async Execute(message, command, dm) {
        await this.Search(message, command, dm);
    }
    async Search(message, command, dm) {
        const title = command.Parameter;
        let media = [];
        const discordId = message.author.id;
        const userMedia = [];
        const filteredMedia = [];
        const formattedResults = [];
        const user = await user_data_1.UserData.GetUser(discordId).catch((reason) => {
            console.log(reason.message);
            sender_1.Sender.Send(message, `System Error!, I couldn't apprehend, please try again later.`, dm);
        });
        if (user instanceof subscription_model_1.User === false)
            return;
        anime_cache_1.AnimeCache.Search(command.Parameter)
            .then(async (res) => {
            media = res;
            await subscription_data_1.SubscriptionData.All.forEach(async (sub) => {
                if (sub.UserId === user.Id) {
                    await userMedia.push(sub.MediaId);
                }
            });
            await media.forEach(async (m) => {
                if (userMedia.includes(m.idMal)) {
                    await filteredMedia.push(m);
                    await formattedResults.push(media_list_handler_1.MediaFormatHandler.Get(m));
                }
            });
            if (filteredMedia.length === 0) {
                sender_1.Sender.SendInfo(message, `Hmm..It seems that you are not subscribe to any anime that matches your keyword  ***${title}***.`, dm);
            }
            else if (filteredMedia.length === 1) {
                await subscription_data_1.SubscriptionData.Delete(filteredMedia[0].idMal, discordId);
                sender_1.Sender.SendInfo(message, `You are now unsubscribed from  ***${title_helper_1.TitleHelper.Get(filteredMedia[0].title)}***`, dm);
            }
            else {
                const embed = await search_list_1.SearchList.Embed(message, command, formattedResults);
                sender_1.Sender.SendInfo(message, embed, dm);
            }
        })
            .catch(() => {
            sender_1.Sender.Send(message, `Ge mo nasai! I didn't find anime that matches your keyword \`${command.Parameter}\``, dm);
            console.warn(`Error while searching : [MediaSearch.All(${command.Parameter})]`);
        });
    }
}
exports.UnsubFunction = UnsubFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zdWIuY29tbWFuZC5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kL2Z1bmN0aW9ucy91bnN1Yi5jb21tYW5kLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsc0VBQWtFO0FBSWxFLG9EQUFnRDtBQUNoRCwwRUFBdUU7QUFDdkUsd0RBQW9EO0FBQ3BELDZEQUF5RDtBQUN6RCxnREFBNkM7QUFDN0Msd0VBQXVEO0FBQ3ZELHdEQUFvRDtBQUVwRCxNQUFhLGFBQWE7SUFDakIsS0FBSyxDQUFDLE9BQU8sQ0FDbEIsT0FBaUIsRUFDakIsT0FBa0IsRUFDbEIsRUFBWTtRQUVaLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQWlCLEVBQUUsT0FBa0IsRUFBRSxFQUFZO1FBQ3RFLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDaEMsSUFBSSxLQUFLLEdBQWEsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFhLEVBQUUsQ0FBQztRQUMvQixNQUFNLGFBQWEsR0FBYSxFQUFFLENBQUM7UUFDbkMsTUFBTSxnQkFBZ0IsR0FBVSxFQUFFLENBQUM7UUFDbkMsTUFBTSxJQUFJLEdBQUcsTUFBTSxvQkFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFhLEVBQUUsRUFBRTtZQUNyRSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QixlQUFNLENBQUMsSUFBSSxDQUNULE9BQU8sRUFDUCw4REFBOEQsRUFDOUQsRUFBRSxDQUNILENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksSUFBSSxZQUFZLHlCQUFJLEtBQUssS0FBSztZQUFFLE9BQU87UUFDM0Msd0JBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQzthQUNqQyxJQUFJLENBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFO1lBQ2hCLEtBQUssR0FBRyxHQUFHLENBQUM7WUFDWixNQUFNLG9DQUFnQixDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFO2dCQUM3QyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQU0sSUFBYSxDQUFDLEVBQUUsRUFBRTtvQkFDcEMsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDbkM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUU7Z0JBQzVCLElBQUksU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQy9CLE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUIsTUFBTSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsdUNBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3hEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUM5QixlQUFNLENBQUMsUUFBUSxDQUNiLE9BQU8sRUFDUCx1RkFBdUYsS0FBSyxNQUFNLEVBQ2xHLEVBQUUsQ0FDSCxDQUFDO2FBQ0g7aUJBQU0sSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDckMsTUFBTSxvQ0FBZ0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDakUsZUFBTSxDQUFDLFFBQVEsQ0FDYixPQUFPLEVBQ1AscUNBQXFDLDBCQUFXLENBQUMsR0FBRyxDQUNsRCxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUN2QixLQUFLLEVBQ04sRUFBRSxDQUNILENBQUM7YUFDSDtpQkFBTTtnQkFDTCxNQUFNLEtBQUssR0FBRyxNQUFNLHdCQUFVLENBQUMsS0FBSyxDQUNsQyxPQUFPLEVBQ1AsT0FBTyxFQUNQLGdCQUFnQixDQUNqQixDQUFDO2dCQUNGLGVBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQzthQUNyQztRQUNILENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDVixlQUFNLENBQUMsSUFBSSxDQUNULE9BQU8sRUFDUCxnRUFDRSxPQUFPLENBQUMsU0FDVixJQUFJLEVBQ0osRUFBRSxDQUNILENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUNWLDRDQUE0QyxPQUFPLENBQUMsU0FBUyxJQUFJLENBQ2xFLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDRjtBQTVFRCxzQ0E0RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29tbWFuZEZ1bmN0aW9uIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvY29tbWFuZC5mdW5jdGlvbi5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IE1lZGlhU2VhcmNoIH0gZnJvbSBcIi4vLi4vLi4vY29yZS9tZWRpYS5zZWFyY2hcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkRhdGEgfSBmcm9tIFwiLi8uLi8uLi9kYXRhL3N1YnNjcmlwdGlvbi5kYXRhXCI7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcbmltcG9ydCB7IElDb21tYW5kIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvY29tbWFuZC5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElNZWRpYSB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL3BhZ2UuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBVc2VyRGF0YSB9IGZyb20gXCIuLi8uLi9kYXRhL3VzZXIuZGF0YVwiO1xuaW1wb3J0IHsgTWVkaWFGb3JtYXRIYW5kbGVyIH0gZnJvbSBcIi4uLy4uL2hhbmRsZXJzL21lZGlhLmxpc3QuaGFuZGxlclwiO1xuaW1wb3J0IHsgU2VhcmNoTGlzdCB9IGZyb20gXCIuLi8uLi9jb3JlL3NlYXJjaC5saXN0XCI7XG5pbXBvcnQgeyBUaXRsZUhlbHBlciB9IGZyb20gXCIuLi8uLi9oZWxwZXJzL3RpdGxlLmhlbHBlclwiO1xuaW1wb3J0IHsgU2VuZGVyIH0gZnJvbSBcIi4vLi4vLi4vY29yZS9zZW5kZXJcIjtcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL3N1YnNjcmlwdGlvbi5tb2RlbFwiO1xuaW1wb3J0IHsgQW5pbWVDYWNoZSB9IGZyb20gXCIuLi8uLi9jb3JlL2FuaW1lLmNhY2hlXCI7XG5cbmV4cG9ydCBjbGFzcyBVbnN1YkZ1bmN0aW9uIGltcGxlbWVudHMgSUNvbW1hbmRGdW5jdGlvbiB7XG4gIHB1YmxpYyBhc3luYyBFeGVjdXRlKFxuICAgIG1lc3NhZ2U/OiBNZXNzYWdlLFxuICAgIGNvbW1hbmQ/OiBJQ29tbWFuZCxcbiAgICBkbT86IGJvb2xlYW5cbiAgKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgYXdhaXQgdGhpcy5TZWFyY2gobWVzc2FnZSwgY29tbWFuZCwgZG0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBTZWFyY2gobWVzc2FnZT86IE1lc3NhZ2UsIGNvbW1hbmQ/OiBJQ29tbWFuZCwgZG0/OiBib29sZWFuKSB7XG4gICAgY29uc3QgdGl0bGUgPSBjb21tYW5kLlBhcmFtZXRlcjtcbiAgICBsZXQgbWVkaWE6IElNZWRpYVtdID0gW107XG4gICAgY29uc3QgZGlzY29yZElkID0gbWVzc2FnZS5hdXRob3IuaWQ7XG4gICAgY29uc3QgdXNlck1lZGlhOiBudW1iZXJbXSA9IFtdO1xuICAgIGNvbnN0IGZpbHRlcmVkTWVkaWE6IElNZWRpYVtdID0gW107XG4gICAgY29uc3QgZm9ybWF0dGVkUmVzdWx0czogYW55W10gPSBbXTtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlckRhdGEuR2V0VXNlcihkaXNjb3JkSWQpLmNhdGNoKChyZWFzb246IEVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhyZWFzb24ubWVzc2FnZSk7XG4gICAgICBTZW5kZXIuU2VuZChcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgYFN5c3RlbSBFcnJvciEsIEkgY291bGRuJ3QgYXBwcmVoZW5kLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLmAsXG4gICAgICAgIGRtXG4gICAgICApO1xuICAgIH0pO1xuICAgIGlmICh1c2VyIGluc3RhbmNlb2YgVXNlciA9PT0gZmFsc2UpIHJldHVybjtcbiAgICBBbmltZUNhY2hlLlNlYXJjaChjb21tYW5kLlBhcmFtZXRlcilcbiAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiB7XG4gICAgICAgIG1lZGlhID0gcmVzO1xuICAgICAgICBhd2FpdCBTdWJzY3JpcHRpb25EYXRhLkFsbC5mb3JFYWNoKGFzeW5jIHN1YiA9PiB7XG4gICAgICAgICAgaWYgKHN1Yi5Vc2VySWQgPT09ICh1c2VyIGFzIFVzZXIpLklkKSB7XG4gICAgICAgICAgICBhd2FpdCB1c2VyTWVkaWEucHVzaChzdWIuTWVkaWFJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgbWVkaWEuZm9yRWFjaChhc3luYyBtID0+IHtcbiAgICAgICAgICBpZiAodXNlck1lZGlhLmluY2x1ZGVzKG0uaWRNYWwpKSB7XG4gICAgICAgICAgICBhd2FpdCBmaWx0ZXJlZE1lZGlhLnB1c2gobSk7XG4gICAgICAgICAgICBhd2FpdCBmb3JtYXR0ZWRSZXN1bHRzLnB1c2goTWVkaWFGb3JtYXRIYW5kbGVyLkdldChtKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZpbHRlcmVkTWVkaWEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgU2VuZGVyLlNlbmRJbmZvKFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGBIbW0uLkl0IHNlZW1zIHRoYXQgeW91IGFyZSBub3Qgc3Vic2NyaWJlIHRvIGFueSBhbmltZSB0aGF0IG1hdGNoZXMgeW91ciBrZXl3b3JkICAqKioke3RpdGxlfSoqKi5gLFxuICAgICAgICAgICAgZG1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlcmVkTWVkaWEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgYXdhaXQgU3Vic2NyaXB0aW9uRGF0YS5EZWxldGUoZmlsdGVyZWRNZWRpYVswXS5pZE1hbCwgZGlzY29yZElkKTtcbiAgICAgICAgICBTZW5kZXIuU2VuZEluZm8oXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgYFlvdSBhcmUgbm93IHVuc3Vic2NyaWJlZCBmcm9tICAqKioke1RpdGxlSGVscGVyLkdldChcbiAgICAgICAgICAgICAgZmlsdGVyZWRNZWRpYVswXS50aXRsZVxuICAgICAgICAgICAgKX0qKipgLFxuICAgICAgICAgICAgZG1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGVtYmVkID0gYXdhaXQgU2VhcmNoTGlzdC5FbWJlZChcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBjb21tYW5kLFxuICAgICAgICAgICAgZm9ybWF0dGVkUmVzdWx0c1xuICAgICAgICAgICk7XG4gICAgICAgICAgU2VuZGVyLlNlbmRJbmZvKG1lc3NhZ2UsIGVtYmVkLCBkbSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICBTZW5kZXIuU2VuZChcbiAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgIGBHZSBtbyBuYXNhaSEgSSBkaWRuJ3QgZmluZCBhbmltZSB0aGF0IG1hdGNoZXMgeW91ciBrZXl3b3JkIFxcYCR7XG4gICAgICAgICAgICBjb21tYW5kLlBhcmFtZXRlclxuICAgICAgICAgIH1cXGBgLFxuICAgICAgICAgIGRtXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgRXJyb3Igd2hpbGUgc2VhcmNoaW5nIDogW01lZGlhU2VhcmNoLkFsbCgke2NvbW1hbmQuUGFyYW1ldGVyfSldYFxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==