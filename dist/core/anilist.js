"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const endeavor = require("endeavor");
const search_variables_1 = require("../graphql/variables/search.variables");
const graphql_1 = require("../graphql/graphql");
class AniList {
    static async MediaSearch(search) {
        return new Promise((resolve, reject) => {
            const query = graphql_1.GraphQL.SearchQL;
            const variables = search_variables_1.SearchVariables.Get(search, 1, 100, "ANIME");
            endeavor
                .queryAnilist({ query, variables })
                .then(result => {
                resolve(result);
            })
                .catch(error => {
                reject(error);
            });
        });
    }
    static async MediaQuery(id) {
        return new Promise((resolve, reject) => {
            const query = graphql_1.GraphQL.AnimeQL;
            const variables = search_variables_1.SearchVariables.Media(id);
            endeavor
                .queryAnilist({ query, variables })
                .then(result => {
                resolve(result);
            })
                .catch(error => {
                console.log(error);
            });
        });
    }
    static async UserQuery(username) {
        return new Promise((resolve, reject) => {
            const query = graphql_1.GraphQL.UserQL;
            const variables = search_variables_1.SearchVariables.User(username);
            endeavor
                .queryAnilist({ query, variables })
                .then(result => {
                resolve(result);
            })
                .catch(error => {
                console.log(error);
                resolve(null);
            });
        });
    }
    static async MediaListQuery(id) {
        return new Promise((resolve, reject) => {
            const query = graphql_1.GraphQL.UserMediaListQL;
            const variables = search_variables_1.SearchVariables.UserMediaList(id);
            endeavor
                .queryAnilist({ query, variables })
                .then(result => {
                resolve(result);
            })
                .catch(error => {
                console.log(error);
                resolve(null);
            });
        });
    }
}
exports.AniList = AniList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlL2FuaWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBc0M7QUFDdEMsNEVBQXdFO0FBQ3hFLGdEQUE2QztBQVM3QyxNQUFhLE9BQU87SUFDWCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUFjO1FBQzVDLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsTUFBTSxLQUFLLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUM7WUFDL0IsTUFBTSxTQUFTLEdBQUcsa0NBQWUsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDL0QsUUFBUTtpQkFDTCxZQUFZLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7aUJBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDYixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEIsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDYixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFVO1FBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsTUFBTSxLQUFLLEdBQUcsaUJBQU8sQ0FBQyxPQUFPLENBQUM7WUFDOUIsTUFBTSxTQUFTLEdBQUcsa0NBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDNUMsUUFBUTtpQkFDTCxZQUFZLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUM7aUJBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDYixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEIsQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBZ0I7UUFDNUMsT0FBTyxJQUFJLE9BQU8sQ0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM3QyxNQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQztZQUM3QixNQUFNLFNBQVMsR0FBRyxrQ0FBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNqRCxRQUFRO2lCQUNMLFlBQVksQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztpQkFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQVU7UUFDM0MsT0FBTyxJQUFJLE9BQU8sQ0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM3QyxNQUFNLEtBQUssR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQztZQUN0QyxNQUFNLFNBQVMsR0FBRyxrQ0FBZSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwRCxRQUFRO2lCQUNMLFlBQVksQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztpQkFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNoQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBOURELDBCQThEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbmRlYXZvciA9IHJlcXVpcmUoXCJlbmRlYXZvclwiKTtcbmltcG9ydCB7IFNlYXJjaFZhcmlhYmxlcyB9IGZyb20gXCIuLi9ncmFwaHFsL3ZhcmlhYmxlcy9zZWFyY2gudmFyaWFibGVzXCI7XG5pbXBvcnQgeyBHcmFwaFFMIH0gZnJvbSBcIi4uL2dyYXBocWwvZ3JhcGhxbFwiO1xuaW1wb3J0IHsgUm9vdCwgRGF0YSB9IGZyb20gXCIuLi9tb2RlbHMvYW5pbGlzdC51c2VyLm1vZGVsXCI7XG5pbXBvcnQgeyBJTWVkaWFMaXN0RGF0YSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2FuaS5zeW5jLmludGVyZmFjZVwiO1xuaW1wb3J0IHtcbiAgTGlzdFJvb3QsXG4gIE1lZGlhTGlzdENvbGxlY3Rpb24sXG4gIE1lZGlhTGlzdERhdGFcbn0gZnJvbSBcIi4uL21vZGVscy9hbmkuc3luYy5tb2RlbFwiO1xuXG5leHBvcnQgY2xhc3MgQW5pTGlzdCB7XG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgTWVkaWFTZWFyY2goc2VhcmNoOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8b2JqZWN0PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IEdyYXBoUUwuU2VhcmNoUUw7XG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSBTZWFyY2hWYXJpYWJsZXMuR2V0KHNlYXJjaCwgMSwgMTAwLCBcIkFOSU1FXCIpO1xuICAgICAgZW5kZWF2b3JcbiAgICAgICAgLnF1ZXJ5QW5pbGlzdCh7IHF1ZXJ5LCB2YXJpYWJsZXMgfSlcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIE1lZGlhUXVlcnkoaWQ6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxvYmplY3Q+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gR3JhcGhRTC5BbmltZVFMO1xuICAgICAgY29uc3QgdmFyaWFibGVzID0gU2VhcmNoVmFyaWFibGVzLk1lZGlhKGlkKTtcbiAgICAgIGVuZGVhdm9yXG4gICAgICAgIC5xdWVyeUFuaWxpc3QoeyBxdWVyeSwgdmFyaWFibGVzIH0pXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIFVzZXJRdWVyeSh1c2VybmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPG9iamVjdD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBHcmFwaFFMLlVzZXJRTDtcbiAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IFNlYXJjaFZhcmlhYmxlcy5Vc2VyKHVzZXJuYW1lKTtcbiAgICAgIGVuZGVhdm9yXG4gICAgICAgIC5xdWVyeUFuaWxpc3QoeyBxdWVyeSwgdmFyaWFibGVzIH0pXG4gICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgTWVkaWFMaXN0UXVlcnkoaWQ6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxvYmplY3Q+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gR3JhcGhRTC5Vc2VyTWVkaWFMaXN0UUw7XG4gICAgICBjb25zdCB2YXJpYWJsZXMgPSBTZWFyY2hWYXJpYWJsZXMuVXNlck1lZGlhTGlzdChpZCk7XG4gICAgICBlbmRlYXZvclxuICAgICAgICAucXVlcnlBbmlsaXN0KHsgcXVlcnksIHZhcmlhYmxlcyB9KVxuICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==