"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mal_1 = require("../core/mal");
const mal_bind_data_1 = require("./mal.bind.data");
const commands_1 = require("../command/commands");
class MalUserData {
    static GetUser(message) {
        return new Promise(async (resolve, reject) => {
            const malBind = await mal_bind_data_1.MalBindData.Get(message.author.id);
            if (commands_1.malbind === null) {
                resolve(null);
            }
            const list = await mal_1.MAL.GetCWList(malBind.MalUsername);
            if (list === null) {
                resolve(null);
            }
            resolve(list);
        });
    }
    static Exists(message, sub) {
        return new Promise((resolve, reject) => {
            this.GetUser(message)
                .then(list => {
                const malAnime = list.find(ma => ma.anime_id === sub.MediaId);
                if (malAnime === null || malAnime === undefined) {
                    resolve(false);
                }
                else {
                    resolve(true);
                }
            })
                .catch(err => {
                reject(err);
            });
        });
    }
}
exports.MalUserData = MalUserData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFsLnVzZXIuZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhL21hbC51c2VyLmRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBa0M7QUFFbEMsbURBQThDO0FBRzlDLGtEQUE4QztBQUU5QyxNQUFhLFdBQVc7SUFDZixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQWdCO1FBQ3BDLE9BQU8sSUFBSSxPQUFPLENBQWEsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN2RCxNQUFNLE9BQU8sR0FBRyxNQUFNLDJCQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDekQsSUFBSSxrQkFBTyxLQUFLLElBQUksRUFBRTtnQkFDcEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7WUFDRCxNQUFNLElBQUksR0FBRyxNQUFNLFNBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3RELElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2Y7WUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFnQixFQUFFLEdBQWlCO1FBQ3RELE9BQU8sSUFBSSxPQUFPLENBQVUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7aUJBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDWCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQzlELElBQUksUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO29CQUMvQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ2hCO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDZjtZQUNILENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ1gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQS9CRCxrQ0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNQUwgfSBmcm9tIFwiLi4vY29yZS9tYWxcIjtcbmltcG9ydCB7IE1hbEFuaW1lIH0gZnJvbSBcIi4uL21vZGVscy9tYWwuYW5pbWUubW9kZWxcIjtcbmltcG9ydCB7IE1hbEJpbmREYXRhIH0gZnJvbSBcIi4vbWFsLmJpbmQuZGF0YVwiO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tIFwiLi4vbW9kZWxzL3N1YnNjcmlwdGlvbi5tb2RlbFwiO1xuaW1wb3J0IHsgbWFsYmluZCB9IGZyb20gXCIuLi9jb21tYW5kL2NvbW1hbmRzXCI7XG5cbmV4cG9ydCBjbGFzcyBNYWxVc2VyRGF0YSB7XG4gIHB1YmxpYyBzdGF0aWMgR2V0VXNlcihtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPE1hbEFuaW1lW10+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IG1hbEJpbmQgPSBhd2FpdCBNYWxCaW5kRGF0YS5HZXQobWVzc2FnZS5hdXRob3IuaWQpO1xuICAgICAgaWYgKG1hbGJpbmQgPT09IG51bGwpIHtcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpc3QgPSBhd2FpdCBNQUwuR2V0Q1dMaXN0KG1hbEJpbmQuTWFsVXNlcm5hbWUpO1xuICAgICAgaWYgKGxpc3QgPT09IG51bGwpIHtcbiAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUobGlzdCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEV4aXN0cyhtZXNzYWdlOiBNZXNzYWdlLCBzdWI6IFN1YnNjcmlwdGlvbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLkdldFVzZXIobWVzc2FnZSlcbiAgICAgICAgLnRoZW4obGlzdCA9PiB7XG4gICAgICAgICAgY29uc3QgbWFsQW5pbWUgPSBsaXN0LmZpbmQobWEgPT4gbWEuYW5pbWVfaWQgPT09IHN1Yi5NZWRpYUlkKTtcbiAgICAgICAgICBpZiAobWFsQW5pbWUgPT09IG51bGwgfHwgbWFsQW5pbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==