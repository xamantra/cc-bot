"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const queue_job_model_1 = require("./../models/queue.job.model");
const json_helper_1 = require("./../helpers/json.helper");
const tables_1 = require("../core/tables");
const array_helper_1 = require("../helpers/array.helper");
const mongo_1 = require("../core/mongo");
const subscription_model_1 = require("../models/subscription.model");
const null_checker_helper_1 = require("../helpers/null.checker.helper");
const anime_cache_1 = require("../core/anime.cache");
class QueueData {
    static get All() {
        return this.Queues;
    }
    static async Init() {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            await this.Clear().catch((err) => {
                console.log(err.message);
            });
            this.Initializing = true;
            const result = await mongo_1.Mongo.FindAll(tables_1.Tables.queue);
            const queues = await json_helper_1.JsonHelper.ArrayConvert(result, subscription_model_1.Queue);
            if (queues === null || queues === undefined) {
                this.Initializing = false;
                console.log(`"JsonHelper.ArrayConvert<Queue>(result, Queue)" is 'null' or 'undefined'`);
                resolve();
            }
            else {
                if (queues.length === 0) {
                    this.Initializing = false;
                    console.log(`Queue List Length: ${this.Queues.length}`);
                    resolve();
                }
                else {
                    this.Queues = queues;
                    this.Initializing = false;
                    console.log(`Queue List Length: ${this.Queues.length}`);
                    resolve();
                }
            }
        });
    }
    static CheckFromApi() {
        return new Promise(async (resolve, reject) => {
            for (let i = 0; i < this.Queues.length; i++) {
                const queue = this.Queues[i];
                const anime = await anime_cache_1.AnimeCache.Get(queue.MediaId);
                this.SetQueue(queue, anime);
                if (i === this.Queues.length - 1) {
                    resolve();
                }
            }
        });
    }
    static async Clear() {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            this.Queues.length = 0;
            this.QueueJobs.length = 0;
            this.Queues.splice(0, this.Queues.length);
            this.QueueJobs.splice(0, this.QueueJobs.length);
            if (this.Queues.length === 0 && this.QueueJobs.length === 0) {
                resolve();
            }
            else {
                reject(new Error(`The arrays were not cleared.`));
            }
        });
    }
    static async GetQueue(mediaId) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            const q = this.All.find(x => x.MediaId === mediaId);
            if (q !== null && q !== undefined) {
                resolve(q);
            }
            else {
                resolve(null);
                console.log(`"this.All.find(x => x.MediaId === mediaId)" is 'null' or 'undefined'.`);
            }
        });
    }
    static async SetQueue(queue, anime) {
        await this.OnReady();
        if (null_checker_helper_1.NullCheck.Fine(queue)) {
            const queueJob = new queue_job_model_1.QueueJob(anime, queue);
            await this.AddJob(queueJob);
        }
    }
    static GetJobs() {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            resolve(this.QueueJobs);
        });
    }
    static AddJob(queueJob) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            await queueJob.Check();
            this.QueueJobs.push(queueJob);
            resolve();
        });
    }
    static async RemoveJob(queueJob) {
        await this.OnReady();
        array_helper_1.ArrayHelper.remove(this.QueueJobs, queueJob, async () => {
            queueJob = null;
        });
    }
    static async Insert(mediaId, next_episode) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            const exists = await this.Exists(mediaId);
            if (exists === false) {
                const data = { media_id: mediaId, next_episode: next_episode };
                const result = await mongo_1.Mongo.Insert(tables_1.Tables.queue, data);
                if (result.insertedId !== undefined && result.insertedId !== null) {
                    const q = new subscription_model_1.Queue();
                    q.Id = result.insertedId;
                    q.MediaId = mediaId;
                    q.NextEpisode = next_episode;
                    this.Queues.push(q);
                    resolve(q.Id);
                }
                else {
                    resolve(null);
                }
            }
            else {
                const queue = await this.GetQueue(mediaId);
                if (queue === null || queue === undefined) {
                    resolve(null);
                }
                else {
                    resolve(queue.Id);
                }
            }
        });
    }
    static async Update(media, queueJob) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            const query = { media_id: media.idMal };
            const newValues = {
                $set: { next_episode: media.nextAiringEpisode.next }
            };
            await mongo_1.Mongo.Update(tables_1.Tables.queue, query, newValues);
            await this.Init();
            const q = await this.GetQueue(media.idMal);
            if (q !== null) {
                const qj = new queue_job_model_1.QueueJob(media, q);
                await this.AddJob(qj);
                await this.RemoveJob(queueJob);
                resolve();
            }
            else {
                resolve();
            }
        });
    }
    static async Exists(mediaId) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            const q = this.All.find(x => x.MediaId === mediaId);
            if (q === null || q === undefined) {
                resolve(false);
            }
            else {
                resolve(true);
            }
        });
    }
    static async LogAll() {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            if (this.Queues === null || this.Queues === undefined) {
                reject(new Error(`"Queues" is 'null' or 'undefined'.`));
            }
            else {
                console.log(this.Queues);
                console.log(this.QueueJobs);
                resolve();
            }
        });
    }
    static OnReady() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Initializing === false) {
                    resolve();
                }
            }, 1);
        });
    }
}
QueueData.Queues = [];
QueueData.QueueJobs = [];
QueueData.Initializing = false;
exports.QueueData = QueueData;
//# sourceMappingURL=data:application/json;base64,