"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const queue_data_1 = require("./data/queue.data");
const discord_js_1 = require("discord.js");
const subscription_data_1 = require("./data/subscription.data");
const user_data_1 = require("./data/user.data");
const client_1 = require("./core/client");
const manager_command_1 = require("./command/manager.command");
const message_handler_1 = require("./handlers/message.handler");
const openshift_1 = require("./others/openshift");
const scheduler_1 = require("./core/scheduler");
const presence_1 = require("./core/presence");
const mal_bind_data_1 = require("./data/mal.bind.data");
const anime_cache_1 = require("./core/anime.cache");
class App {
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    async Run() {
        await user_data_1.UserData.Init();
        await queue_data_1.QueueData.Init();
        await subscription_data_1.SubscriptionData.Init();
        await mal_bind_data_1.MalBindData.Init();
        await presence_1.BotPresence.Init();
        await queue_data_1.QueueData.CheckFromApi();
        anime_cache_1.AnimeCache.Update(0);
        scheduler_1.Scheduler.LoopJob(0, 10, 0, async () => {
            console.log(`Refreshing Data....`);
            await queue_data_1.QueueData.Init();
            await presence_1.BotPresence.Init();
            await queue_data_1.QueueData.CheckFromApi();
        });
    }
}
openshift_1.OpenShiftUptimer.Log(true);
openshift_1.OpenShiftUptimer.AutoConfigure();
client_1.ClientManager.Init(new discord_js_1.Client());
message_handler_1.MessageHandler.Init();
manager_command_1.CommandManager.Init();
App.Instance.Run();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBOEM7QUFDOUMsMkNBQW9DO0FBQ3BDLGdFQUE0RDtBQUM1RCxnREFBNEM7QUFDNUMsMENBQThDO0FBQzlDLCtEQUEyRDtBQUMzRCxnRUFBNEQ7QUFDNUQsa0RBQXNEO0FBQ3RELGdEQUE2QztBQUM3Qyw4Q0FBOEM7QUFDOUMsd0RBQW1EO0FBQ25ELG9EQUFnRDtBQUVoRCxNQUFNLEdBQUc7SUFFQSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUc7UUFDZCxNQUFNLG9CQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsTUFBTSxzQkFBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sb0NBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDOUIsTUFBTSwyQkFBVyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3pCLE1BQU0sc0JBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN6QixNQUFNLHNCQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0Isd0JBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckIscUJBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sc0JBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN2QixNQUFNLHNCQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDekIsTUFBTSxzQkFBUyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsNEJBQWdCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNCLDRCQUFnQixDQUFDLGFBQWEsRUFBRSxDQUFDO0FBRWpDLHNCQUFhLENBQUMsSUFBSSxDQUFDLElBQUksbUJBQU0sRUFBRSxDQUFDLENBQUM7QUFDakMsZ0NBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN0QixnQ0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0FBRXRCLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWV1ZURhdGEgfSBmcm9tIFwiLi9kYXRhL3F1ZXVlLmRhdGFcIjtcbmltcG9ydCB7IENsaWVudCB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25EYXRhIH0gZnJvbSBcIi4vZGF0YS9zdWJzY3JpcHRpb24uZGF0YVwiO1xuaW1wb3J0IHsgVXNlckRhdGEgfSBmcm9tIFwiLi9kYXRhL3VzZXIuZGF0YVwiO1xuaW1wb3J0IHsgQ2xpZW50TWFuYWdlciB9IGZyb20gXCIuL2NvcmUvY2xpZW50XCI7XG5pbXBvcnQgeyBDb21tYW5kTWFuYWdlciB9IGZyb20gXCIuL2NvbW1hbmQvbWFuYWdlci5jb21tYW5kXCI7XG5pbXBvcnQgeyBNZXNzYWdlSGFuZGxlciB9IGZyb20gXCIuL2hhbmRsZXJzL21lc3NhZ2UuaGFuZGxlclwiO1xuaW1wb3J0IHsgT3BlblNoaWZ0VXB0aW1lciB9IGZyb20gXCIuL290aGVycy9vcGVuc2hpZnRcIjtcbmltcG9ydCB7IFNjaGVkdWxlciB9IGZyb20gXCIuL2NvcmUvc2NoZWR1bGVyXCI7XG5pbXBvcnQgeyBCb3RQcmVzZW5jZSB9IGZyb20gXCIuL2NvcmUvcHJlc2VuY2VcIjtcbmltcG9ydCB7IE1hbEJpbmREYXRhIH0gZnJvbSBcIi4vZGF0YS9tYWwuYmluZC5kYXRhXCI7XG5pbXBvcnQgeyBBbmltZUNhY2hlIH0gZnJvbSBcIi4vY29yZS9hbmltZS5jYWNoZVwiO1xuXG5jbGFzcyBBcHAge1xuICBzdGF0aWMgX2luc3RhbmNlOiBBcHA7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0IEluc3RhbmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZSB8fCAodGhpcy5faW5zdGFuY2UgPSBuZXcgdGhpcygpKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBSdW4oKSB7XG4gICAgYXdhaXQgVXNlckRhdGEuSW5pdCgpO1xuICAgIGF3YWl0IFF1ZXVlRGF0YS5Jbml0KCk7XG4gICAgYXdhaXQgU3Vic2NyaXB0aW9uRGF0YS5Jbml0KCk7XG4gICAgYXdhaXQgTWFsQmluZERhdGEuSW5pdCgpO1xuICAgIGF3YWl0IEJvdFByZXNlbmNlLkluaXQoKTtcbiAgICBhd2FpdCBRdWV1ZURhdGEuQ2hlY2tGcm9tQXBpKCk7XG4gICAgQW5pbWVDYWNoZS5VcGRhdGUoMCk7XG4gICAgU2NoZWR1bGVyLkxvb3BKb2IoMCwgMTAsIDAsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGBSZWZyZXNoaW5nIERhdGEuLi4uYCk7XG4gICAgICBhd2FpdCBRdWV1ZURhdGEuSW5pdCgpO1xuICAgICAgYXdhaXQgQm90UHJlc2VuY2UuSW5pdCgpO1xuICAgICAgYXdhaXQgUXVldWVEYXRhLkNoZWNrRnJvbUFwaSgpO1xuICAgIH0pO1xuICB9XG59XG5cbk9wZW5TaGlmdFVwdGltZXIuTG9nKHRydWUpO1xuT3BlblNoaWZ0VXB0aW1lci5BdXRvQ29uZmlndXJlKCk7XG5cbkNsaWVudE1hbmFnZXIuSW5pdChuZXcgQ2xpZW50KCkpO1xuTWVzc2FnZUhhbmRsZXIuSW5pdCgpO1xuQ29tbWFuZE1hbmFnZXIuSW5pdCgpO1xuXG5BcHAuSW5zdGFuY2UuUnVuKCk7XG4iXX0=