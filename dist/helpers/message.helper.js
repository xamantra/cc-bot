"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../core/config");
const discord_js_1 = require("discord.js");
class MessageHelper {
    static IsCommand(config, message) {
        return message.content.indexOf(config_1.Config.COMMAND_PREFIX) === 0;
    }
    static IsDMChannel(message) {
        return message.channel instanceof discord_js_1.DMChannel || message.guild === null;
    }
    static HasPermission(message) {
        const roles = ["Ōnā", "Botto"];
        return message.member.roles.some(r => roles.includes(r.name));
    }
    static GetPermissions(message, log = false) {
        const permissions = message.member.permissions;
        if (log === true) {
            console.log(permissions.toArray());
        }
        return permissions;
    }
    static GetArgs(config, message) {
        return message.content
            .slice(config_1.Config.COMMAND_PREFIX.length)
            .trim()
            .split(/ +/g);
    }
    static GetCommand(config, message) {
        return this.GetArgs(config, message)
            .shift()
            .toLowerCase();
    }
    static GetParameter(config, message) {
        const args = this.GetArgs(config, message);
        return args.slice(1, args.length).join(" ");
    }
    static Delete(message) {
        if (message.deletable) {
            message.delete();
        }
    }
}
exports.MessageHelper = MessageHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy9tZXNzYWdlLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJDQUF3QztBQUN4QywyQ0FBZ0Q7QUFFaEQsTUFBYSxhQUFhO0lBQ2pCLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBYyxFQUFFLE9BQWdCO1FBQ3RELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFnQjtRQUN4QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLFlBQVksc0JBQVMsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztJQUN4RSxDQUFDO0lBRU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFnQjtRQUMxQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBZ0IsRUFBRSxNQUFlLEtBQUs7UUFDakUsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDL0MsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDcEM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFjLEVBQUUsT0FBZ0I7UUFDcEQsT0FBTyxPQUFPLENBQUMsT0FBTzthQUNuQixLQUFLLENBQUMsZUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7YUFDbkMsSUFBSSxFQUFFO2FBQ04sS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFTSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQWMsRUFBRSxPQUFnQjtRQUN2RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQzthQUNqQyxLQUFLLEVBQUU7YUFDUCxXQUFXLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFjLEVBQUUsT0FBZ0I7UUFDekQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQWdCO1FBQ25DLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtZQUNyQixPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDbEI7SUFDSCxDQUFDO0NBQ0Y7QUE3Q0Qsc0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uL2NvcmUvY29uZmlnXCI7XG5pbXBvcnQgeyBNZXNzYWdlLCBETUNoYW5uZWwgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgTWVzc2FnZUhlbHBlciB7XG4gIHB1YmxpYyBzdGF0aWMgSXNDb21tYW5kKGNvbmZpZzogQ29uZmlnLCBtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UuY29udGVudC5pbmRleE9mKENvbmZpZy5DT01NQU5EX1BSRUZJWCkgPT09IDA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIElzRE1DaGFubmVsKG1lc3NhZ2U6IE1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbWVzc2FnZS5jaGFubmVsIGluc3RhbmNlb2YgRE1DaGFubmVsIHx8IG1lc3NhZ2UuZ3VpbGQgPT09IG51bGw7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEhhc1Blcm1pc3Npb24obWVzc2FnZTogTWVzc2FnZSkge1xuICAgIGNvbnN0IHJvbGVzID0gW1wixYxuxIFcIiwgXCJCb3R0b1wiXTtcbiAgICByZXR1cm4gbWVzc2FnZS5tZW1iZXIucm9sZXMuc29tZShyID0+IHJvbGVzLmluY2x1ZGVzKHIubmFtZSkpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRQZXJtaXNzaW9ucyhtZXNzYWdlOiBNZXNzYWdlLCBsb2c6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIGNvbnN0IHBlcm1pc3Npb25zID0gbWVzc2FnZS5tZW1iZXIucGVybWlzc2lvbnM7XG4gICAgaWYgKGxvZyA9PT0gdHJ1ZSkge1xuICAgICAgY29uc29sZS5sb2cocGVybWlzc2lvbnMudG9BcnJheSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBlcm1pc3Npb25zO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRBcmdzKGNvbmZpZzogQ29uZmlnLCBtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgcmV0dXJuIG1lc3NhZ2UuY29udGVudFxuICAgICAgLnNsaWNlKENvbmZpZy5DT01NQU5EX1BSRUZJWC5sZW5ndGgpXG4gICAgICAudHJpbSgpXG4gICAgICAuc3BsaXQoLyArL2cpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRDb21tYW5kKGNvbmZpZzogQ29uZmlnLCBtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuR2V0QXJncyhjb25maWcsIG1lc3NhZ2UpXG4gICAgICAuc2hpZnQoKVxuICAgICAgLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEdldFBhcmFtZXRlcihjb25maWc6IENvbmZpZywgbWVzc2FnZTogTWVzc2FnZSkge1xuICAgIGNvbnN0IGFyZ3MgPSB0aGlzLkdldEFyZ3MoY29uZmlnLCBtZXNzYWdlKTtcbiAgICByZXR1cm4gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCkuam9pbihcIiBcIik7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIERlbGV0ZShtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UuZGVsZXRhYmxlKSB7XG4gICAgICBtZXNzYWdlLmRlbGV0ZSgpO1xuICAgIH1cbiAgfVxufVxuIl19