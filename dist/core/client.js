"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
// import DBL from "dblapi.js";
class ClientManager {
    static async Init(client) {
        // const dbl = new DBL(Config.DBL_TOKEN);
        this.Client = client;
        client.on("guildCreate", guild => {
            console.log(`New server joined: ${guild.name} (Id: ${guild.id}). This server has ${guild.memberCount} members!`);
        });
        client.on("ready", () => {
            console.log(`Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} servers.`);
            // dbl.postStats(client.guilds.size);
            // setInterval(() => {
            //   dbl.postStats(client.guilds.size);
            // }, 1800000);
        });
        client.login(config_1.Config.BOT_TOKEN);
    }
    static GetClient() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Client !== null && this.Client !== undefined) {
                    resolve(this.Client);
                }
            }, 100);
        });
    }
    static GetUser(discordId) {
        return new Promise(async (resolve, reject) => {
            const client = await this.GetClient();
            setInterval(() => {
                const user = client.users.get(discordId);
                if (user !== null && user !== undefined) {
                    resolve(user);
                }
            }, 1);
            setTimeout(() => {
                resolve(null);
            }, 10000);
        });
    }
}
exports.ClientManager = ClientManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQWtDO0FBQ2xDLCtCQUErQjtBQUUvQixNQUFhLGFBQWE7SUFHakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYztRQUNyQyx5Q0FBeUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCxzQkFBc0IsS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRSxzQkFDL0MsS0FBSyxDQUFDLFdBQ1IsV0FBVyxDQUNaLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUNULHlCQUF5QixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksY0FDeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUNsQixnQkFBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FDOUMsQ0FBQztZQUNGLHFDQUFxQztZQUNyQyxzQkFBc0I7WUFDdEIsdUNBQXVDO1lBQ3ZDLGVBQWU7UUFDakIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVM7UUFDckIsT0FBTyxJQUFJLE9BQU8sQ0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM3QyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUNmLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7b0JBQ3JELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3RCO1lBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFpQjtRQUNyQyxPQUFPLElBQUksT0FBTyxDQUFPLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDakQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDdEMsV0FBVyxDQUFDLEdBQUcsRUFBRTtnQkFDZixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDekMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7b0JBQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDZjtZQUNILENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNOLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBcERELHNDQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsaWVudCwgVXNlciB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcbi8vIGltcG9ydCBEQkwgZnJvbSBcImRibGFwaS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgQ2xpZW50TWFuYWdlciB7XG4gIHB1YmxpYyBzdGF0aWMgQ2xpZW50OiBDbGllbnQ7XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBJbml0KGNsaWVudDogQ2xpZW50KSB7XG4gICAgLy8gY29uc3QgZGJsID0gbmV3IERCTChDb25maWcuREJMX1RPS0VOKTtcbiAgICB0aGlzLkNsaWVudCA9IGNsaWVudDtcbiAgICBjbGllbnQub24oXCJndWlsZENyZWF0ZVwiLCBndWlsZCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYE5ldyBzZXJ2ZXIgam9pbmVkOiAke2d1aWxkLm5hbWV9IChJZDogJHtndWlsZC5pZH0pLiBUaGlzIHNlcnZlciBoYXMgJHtcbiAgICAgICAgICBndWlsZC5tZW1iZXJDb3VudFxuICAgICAgICB9IG1lbWJlcnMhYFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGNsaWVudC5vbihcInJlYWR5XCIsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgQm90IGhhcyBzdGFydGVkLCB3aXRoICR7Y2xpZW50LnVzZXJzLnNpemV9IHVzZXJzLCBpbiAke1xuICAgICAgICAgIGNsaWVudC5jaGFubmVscy5zaXplXG4gICAgICAgIH0gY2hhbm5lbHMgb2YgJHtjbGllbnQuZ3VpbGRzLnNpemV9IHNlcnZlcnMuYFxuICAgICAgKTtcbiAgICAgIC8vIGRibC5wb3N0U3RhdHMoY2xpZW50Lmd1aWxkcy5zaXplKTtcbiAgICAgIC8vIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIC8vICAgZGJsLnBvc3RTdGF0cyhjbGllbnQuZ3VpbGRzLnNpemUpO1xuICAgICAgLy8gfSwgMTgwMDAwMCk7XG4gICAgfSk7XG4gICAgY2xpZW50LmxvZ2luKENvbmZpZy5CT1RfVE9LRU4pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRDbGllbnQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPENsaWVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5DbGllbnQgIT09IG51bGwgJiYgdGhpcy5DbGllbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodGhpcy5DbGllbnQpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRVc2VyKGRpc2NvcmRJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFVzZXI+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuR2V0Q2xpZW50KCk7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBjbGllbnQudXNlcnMuZ2V0KGRpc2NvcmRJZCk7XG4gICAgICAgIGlmICh1c2VyICE9PSBudWxsICYmIHVzZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodXNlcik7XG4gICAgICAgIH1cbiAgICAgIH0sIDEpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICB9LCAxMDAwMCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==