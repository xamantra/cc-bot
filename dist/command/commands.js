"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bot_command_1 = require("./bot.command");
const enums_1 = require("./../core/enums");
const functions_1 = require("./functions");
const examples_1 = require("./examples");
const functions_2 = require("./functions");
exports.help = new bot_command_1.BotCommand("help", "Show all my command list.", false, false, enums_1.Response.ChannelReply, 10, functions_1.helpFunction);
exports.dmhelp = new bot_command_1.BotCommand("dmhelp", "Just similar with the* ***-help*** *command.", false, false, enums_1.Response.DirectMessage, 10, functions_1.helpFunction);
exports.when = new bot_command_1.BotCommand("when", `Search for a schedule of an anime that matches the keyword/parameter.\nYou can either put the exact anime title or just a keyword.`, true, false, enums_1.Response.ChannelReply, 5, functions_1.whenAnimeFunction, examples_1.mediaExample);
exports.dmwhen = new bot_command_1.BotCommand("dmwhen", "Just similar with the* ***-when*** *command.", true, false, enums_1.Response.DirectMessage, 5, functions_1.whenAnimeFunction, examples_1.mediaExample);
exports.sub = new bot_command_1.BotCommand("sub", "Subscribe to an ongoing anime. You can provide keyword or anime title.", true, false, enums_1.Response.ChannelReply, 5, functions_1.subscribeFunction, examples_1.mediaExample);
exports.dmsub = new bot_command_1.BotCommand("dmsub", "Just similar with* ***-sub.**", true, false, enums_1.Response.DirectMessage, 5, functions_1.subscribeFunction, examples_1.mediaExample);
exports.viewsubs = new bot_command_1.BotCommand("viewsubs", "View your own or other's subscription list.", false, true, enums_1.Response.ChannelReply, 20, functions_1.viewSubsFunction);
exports.dmviewsubs = new bot_command_1.BotCommand("dmviewsubs", "Just similar with* ***-viewsubs.**", false, true, enums_1.Response.DirectMessage, 20, functions_1.viewSubsFunction);
exports.unsub = new bot_command_1.BotCommand("unsub", "Unsubscribe to an ongoing anime. You can provide keyword or anime title.", true, false, enums_1.Response.ChannelReply, 5, functions_1.unsubFunction, examples_1.mediaExample);
exports.dmunsub = new bot_command_1.BotCommand("dmunsub", "Just similar with* ***-unsub.**", true, false, enums_1.Response.DirectMessage, 5, functions_1.unsubFunction, examples_1.mediaExample);
exports.malbind = new bot_command_1.BotCommand("malbind", `Bind your mal account with your Rikimaru Discord.`, true, false, enums_1.Response.ChannelReply, 10, functions_2.malBindFunction, examples_1.malBindExample, false);
exports.malsync = new bot_command_1.BotCommand("malsync", `Automatically subscribe to all ongoing anime in your MAL CW list. And also unsubscribe to any anime that it is not in your list.`, false, false, enums_1.Response.ChannelReply, 60, functions_2.malSyncFunction, null, false);
exports.ping = new bot_command_1.BotCommand("ping", "Just check your ping and the API's ping.", false, false, enums_1.Response.ChannelReply, 3, functions_1.pingFunction);
exports.dmping = new bot_command_1.BotCommand("dmping", "Just similar with* ***-ping*** *command.", false, false, enums_1.Response.DirectMessage, 3, functions_1.pingFunction);
exports.logall = new bot_command_1.BotCommand("logall", "Developer only..", false, false, enums_1.Response.DirectMessage, 0, functions_1.logAllFunction, null, true);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbWFuZC9jb21tYW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtDQUEyQztBQUMzQywyQ0FBMkM7QUFDM0MsMkNBUXFCO0FBQ3JCLHlDQUEwRDtBQUMxRCwyQ0FBK0Q7QUFFbEQsUUFBQSxJQUFJLEdBQUcsSUFBSSx3QkFBVSxDQUNoQyxNQUFNLEVBQ04sMkJBQTJCLEVBQzNCLEtBQUssRUFDTCxLQUFLLEVBQ0wsZ0JBQVEsQ0FBQyxZQUFZLEVBQ3JCLEVBQUUsRUFDRix3QkFBWSxDQUNiLENBQUM7QUFDVyxRQUFBLE1BQU0sR0FBRyxJQUFJLHdCQUFVLENBQ2xDLFFBQVEsRUFDUiw4Q0FBOEMsRUFDOUMsS0FBSyxFQUNMLEtBQUssRUFDTCxnQkFBUSxDQUFDLGFBQWEsRUFDdEIsRUFBRSxFQUNGLHdCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsSUFBSSxHQUFHLElBQUksd0JBQVUsQ0FDaEMsTUFBTSxFQUNOLG9JQUFvSSxFQUNwSSxJQUFJLEVBQ0osS0FBSyxFQUNMLGdCQUFRLENBQUMsWUFBWSxFQUNyQixDQUFDLEVBQ0QsNkJBQWlCLEVBQ2pCLHVCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsTUFBTSxHQUFHLElBQUksd0JBQVUsQ0FDbEMsUUFBUSxFQUNSLDhDQUE4QyxFQUM5QyxJQUFJLEVBQ0osS0FBSyxFQUNMLGdCQUFRLENBQUMsYUFBYSxFQUN0QixDQUFDLEVBQ0QsNkJBQWlCLEVBQ2pCLHVCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsR0FBRyxHQUFHLElBQUksd0JBQVUsQ0FDL0IsS0FBSyxFQUNMLHdFQUF3RSxFQUN4RSxJQUFJLEVBQ0osS0FBSyxFQUNMLGdCQUFRLENBQUMsWUFBWSxFQUNyQixDQUFDLEVBQ0QsNkJBQWlCLEVBQ2pCLHVCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsS0FBSyxHQUFHLElBQUksd0JBQVUsQ0FDakMsT0FBTyxFQUNQLCtCQUErQixFQUMvQixJQUFJLEVBQ0osS0FBSyxFQUNMLGdCQUFRLENBQUMsYUFBYSxFQUN0QixDQUFDLEVBQ0QsNkJBQWlCLEVBQ2pCLHVCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsUUFBUSxHQUFHLElBQUksd0JBQVUsQ0FDcEMsVUFBVSxFQUNWLDZDQUE2QyxFQUM3QyxLQUFLLEVBQ0wsSUFBSSxFQUNKLGdCQUFRLENBQUMsWUFBWSxFQUNyQixFQUFFLEVBQ0YsNEJBQWdCLENBQ2pCLENBQUM7QUFDVyxRQUFBLFVBQVUsR0FBRyxJQUFJLHdCQUFVLENBQ3RDLFlBQVksRUFDWixvQ0FBb0MsRUFDcEMsS0FBSyxFQUNMLElBQUksRUFDSixnQkFBUSxDQUFDLGFBQWEsRUFDdEIsRUFBRSxFQUNGLDRCQUFnQixDQUNqQixDQUFDO0FBQ1csUUFBQSxLQUFLLEdBQUcsSUFBSSx3QkFBVSxDQUNqQyxPQUFPLEVBQ1AsMEVBQTBFLEVBQzFFLElBQUksRUFDSixLQUFLLEVBQ0wsZ0JBQVEsQ0FBQyxZQUFZLEVBQ3JCLENBQUMsRUFDRCx5QkFBYSxFQUNiLHVCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsT0FBTyxHQUFHLElBQUksd0JBQVUsQ0FDbkMsU0FBUyxFQUNULGlDQUFpQyxFQUNqQyxJQUFJLEVBQ0osS0FBSyxFQUNMLGdCQUFRLENBQUMsYUFBYSxFQUN0QixDQUFDLEVBQ0QseUJBQWEsRUFDYix1QkFBWSxDQUNiLENBQUM7QUFDVyxRQUFBLE9BQU8sR0FBRyxJQUFJLHdCQUFVLENBQ25DLFNBQVMsRUFDVCxtREFBbUQsRUFDbkQsSUFBSSxFQUNKLEtBQUssRUFDTCxnQkFBUSxDQUFDLFlBQVksRUFDckIsRUFBRSxFQUNGLDJCQUFlLEVBQ2YseUJBQWMsRUFDZCxLQUFLLENBQ04sQ0FBQztBQUNXLFFBQUEsT0FBTyxHQUFHLElBQUksd0JBQVUsQ0FDbkMsU0FBUyxFQUNULGtJQUFrSSxFQUNsSSxLQUFLLEVBQ0wsS0FBSyxFQUNMLGdCQUFRLENBQUMsWUFBWSxFQUNyQixFQUFFLEVBQ0YsMkJBQWUsRUFDZixJQUFJLEVBQ0osS0FBSyxDQUNOLENBQUM7QUFDVyxRQUFBLElBQUksR0FBRyxJQUFJLHdCQUFVLENBQ2hDLE1BQU0sRUFDTiwwQ0FBMEMsRUFDMUMsS0FBSyxFQUNMLEtBQUssRUFDTCxnQkFBUSxDQUFDLFlBQVksRUFDckIsQ0FBQyxFQUNELHdCQUFZLENBQ2IsQ0FBQztBQUNXLFFBQUEsTUFBTSxHQUFHLElBQUksd0JBQVUsQ0FDbEMsUUFBUSxFQUNSLDBDQUEwQyxFQUMxQyxLQUFLLEVBQ0wsS0FBSyxFQUNMLGdCQUFRLENBQUMsYUFBYSxFQUN0QixDQUFDLEVBQ0Qsd0JBQVksQ0FDYixDQUFDO0FBQ1csUUFBQSxNQUFNLEdBQUcsSUFBSSx3QkFBVSxDQUNsQyxRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLEtBQUssRUFDTCxLQUFLLEVBQ0wsZ0JBQVEsQ0FBQyxhQUFhLEVBQ3RCLENBQUMsRUFDRCwwQkFBYyxFQUNkLElBQUksRUFDSixJQUFJLENBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdENvbW1hbmQgfSBmcm9tIFwiLi9ib3QuY29tbWFuZFwiO1xuaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tIFwiLi8uLi9jb3JlL2VudW1zXCI7XG5pbXBvcnQge1xuICBoZWxwRnVuY3Rpb24sXG4gIHdoZW5BbmltZUZ1bmN0aW9uLFxuICBwaW5nRnVuY3Rpb24sXG4gIHN1YnNjcmliZUZ1bmN0aW9uLFxuICBsb2dBbGxGdW5jdGlvbixcbiAgdmlld1N1YnNGdW5jdGlvbixcbiAgdW5zdWJGdW5jdGlvblxufSBmcm9tIFwiLi9mdW5jdGlvbnNcIjtcbmltcG9ydCB7IG1lZGlhRXhhbXBsZSwgbWFsQmluZEV4YW1wbGUgfSBmcm9tIFwiLi9leGFtcGxlc1wiO1xuaW1wb3J0IHsgbWFsQmluZEZ1bmN0aW9uLCBtYWxTeW5jRnVuY3Rpb24gfSBmcm9tIFwiLi9mdW5jdGlvbnNcIjtcblxuZXhwb3J0IGNvbnN0IGhlbHAgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJoZWxwXCIsXG4gIFwiU2hvdyBhbGwgbXkgY29tbWFuZCBsaXN0LlwiLFxuICBmYWxzZSxcbiAgZmFsc2UsXG4gIFJlc3BvbnNlLkNoYW5uZWxSZXBseSxcbiAgMTAsXG4gIGhlbHBGdW5jdGlvblxuKTtcbmV4cG9ydCBjb25zdCBkbWhlbHAgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJkbWhlbHBcIixcbiAgXCJKdXN0IHNpbWlsYXIgd2l0aCB0aGUqICoqKi1oZWxwKioqICpjb21tYW5kLlwiLFxuICBmYWxzZSxcbiAgZmFsc2UsXG4gIFJlc3BvbnNlLkRpcmVjdE1lc3NhZ2UsXG4gIDEwLFxuICBoZWxwRnVuY3Rpb25cbik7XG5leHBvcnQgY29uc3Qgd2hlbiA9IG5ldyBCb3RDb21tYW5kKFxuICBcIndoZW5cIixcbiAgYFNlYXJjaCBmb3IgYSBzY2hlZHVsZSBvZiBhbiBhbmltZSB0aGF0IG1hdGNoZXMgdGhlIGtleXdvcmQvcGFyYW1ldGVyLlxcbllvdSBjYW4gZWl0aGVyIHB1dCB0aGUgZXhhY3QgYW5pbWUgdGl0bGUgb3IganVzdCBhIGtleXdvcmQuYCxcbiAgdHJ1ZSxcbiAgZmFsc2UsXG4gIFJlc3BvbnNlLkNoYW5uZWxSZXBseSxcbiAgNSxcbiAgd2hlbkFuaW1lRnVuY3Rpb24sXG4gIG1lZGlhRXhhbXBsZVxuKTtcbmV4cG9ydCBjb25zdCBkbXdoZW4gPSBuZXcgQm90Q29tbWFuZChcbiAgXCJkbXdoZW5cIixcbiAgXCJKdXN0IHNpbWlsYXIgd2l0aCB0aGUqICoqKi13aGVuKioqICpjb21tYW5kLlwiLFxuICB0cnVlLFxuICBmYWxzZSxcbiAgUmVzcG9uc2UuRGlyZWN0TWVzc2FnZSxcbiAgNSxcbiAgd2hlbkFuaW1lRnVuY3Rpb24sXG4gIG1lZGlhRXhhbXBsZVxuKTtcbmV4cG9ydCBjb25zdCBzdWIgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJzdWJcIixcbiAgXCJTdWJzY3JpYmUgdG8gYW4gb25nb2luZyBhbmltZS4gWW91IGNhbiBwcm92aWRlIGtleXdvcmQgb3IgYW5pbWUgdGl0bGUuXCIsXG4gIHRydWUsXG4gIGZhbHNlLFxuICBSZXNwb25zZS5DaGFubmVsUmVwbHksXG4gIDUsXG4gIHN1YnNjcmliZUZ1bmN0aW9uLFxuICBtZWRpYUV4YW1wbGVcbik7XG5leHBvcnQgY29uc3QgZG1zdWIgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJkbXN1YlwiLFxuICBcIkp1c3Qgc2ltaWxhciB3aXRoKiAqKiotc3ViLioqXCIsXG4gIHRydWUsXG4gIGZhbHNlLFxuICBSZXNwb25zZS5EaXJlY3RNZXNzYWdlLFxuICA1LFxuICBzdWJzY3JpYmVGdW5jdGlvbixcbiAgbWVkaWFFeGFtcGxlXG4pO1xuZXhwb3J0IGNvbnN0IHZpZXdzdWJzID0gbmV3IEJvdENvbW1hbmQoXG4gIFwidmlld3N1YnNcIixcbiAgXCJWaWV3IHlvdXIgb3duIG9yIG90aGVyJ3Mgc3Vic2NyaXB0aW9uIGxpc3QuXCIsXG4gIGZhbHNlLFxuICB0cnVlLFxuICBSZXNwb25zZS5DaGFubmVsUmVwbHksXG4gIDIwLFxuICB2aWV3U3Vic0Z1bmN0aW9uXG4pO1xuZXhwb3J0IGNvbnN0IGRtdmlld3N1YnMgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJkbXZpZXdzdWJzXCIsXG4gIFwiSnVzdCBzaW1pbGFyIHdpdGgqICoqKi12aWV3c3Vicy4qKlwiLFxuICBmYWxzZSxcbiAgdHJ1ZSxcbiAgUmVzcG9uc2UuRGlyZWN0TWVzc2FnZSxcbiAgMjAsXG4gIHZpZXdTdWJzRnVuY3Rpb25cbik7XG5leHBvcnQgY29uc3QgdW5zdWIgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJ1bnN1YlwiLFxuICBcIlVuc3Vic2NyaWJlIHRvIGFuIG9uZ29pbmcgYW5pbWUuIFlvdSBjYW4gcHJvdmlkZSBrZXl3b3JkIG9yIGFuaW1lIHRpdGxlLlwiLFxuICB0cnVlLFxuICBmYWxzZSxcbiAgUmVzcG9uc2UuQ2hhbm5lbFJlcGx5LFxuICA1LFxuICB1bnN1YkZ1bmN0aW9uLFxuICBtZWRpYUV4YW1wbGVcbik7XG5leHBvcnQgY29uc3QgZG11bnN1YiA9IG5ldyBCb3RDb21tYW5kKFxuICBcImRtdW5zdWJcIixcbiAgXCJKdXN0IHNpbWlsYXIgd2l0aCogKioqLXVuc3ViLioqXCIsXG4gIHRydWUsXG4gIGZhbHNlLFxuICBSZXNwb25zZS5EaXJlY3RNZXNzYWdlLFxuICA1LFxuICB1bnN1YkZ1bmN0aW9uLFxuICBtZWRpYUV4YW1wbGVcbik7XG5leHBvcnQgY29uc3QgbWFsYmluZCA9IG5ldyBCb3RDb21tYW5kKFxuICBcIm1hbGJpbmRcIixcbiAgYEJpbmQgeW91ciBtYWwgYWNjb3VudCB3aXRoIHlvdXIgUmlraW1hcnUgRGlzY29yZC5gLFxuICB0cnVlLFxuICBmYWxzZSxcbiAgUmVzcG9uc2UuQ2hhbm5lbFJlcGx5LFxuICAxMCxcbiAgbWFsQmluZEZ1bmN0aW9uLFxuICBtYWxCaW5kRXhhbXBsZSxcbiAgZmFsc2Vcbik7XG5leHBvcnQgY29uc3QgbWFsc3luYyA9IG5ldyBCb3RDb21tYW5kKFxuICBcIm1hbHN5bmNcIixcbiAgYEF1dG9tYXRpY2FsbHkgc3Vic2NyaWJlIHRvIGFsbCBvbmdvaW5nIGFuaW1lIGluIHlvdXIgTUFMIENXIGxpc3QuIEFuZCBhbHNvIHVuc3Vic2NyaWJlIHRvIGFueSBhbmltZSB0aGF0IGl0IGlzIG5vdCBpbiB5b3VyIGxpc3QuYCxcbiAgZmFsc2UsXG4gIGZhbHNlLFxuICBSZXNwb25zZS5DaGFubmVsUmVwbHksXG4gIDYwLFxuICBtYWxTeW5jRnVuY3Rpb24sXG4gIG51bGwsXG4gIGZhbHNlXG4pO1xuZXhwb3J0IGNvbnN0IHBpbmcgPSBuZXcgQm90Q29tbWFuZChcbiAgXCJwaW5nXCIsXG4gIFwiSnVzdCBjaGVjayB5b3VyIHBpbmcgYW5kIHRoZSBBUEkncyBwaW5nLlwiLFxuICBmYWxzZSxcbiAgZmFsc2UsXG4gIFJlc3BvbnNlLkNoYW5uZWxSZXBseSxcbiAgMyxcbiAgcGluZ0Z1bmN0aW9uXG4pO1xuZXhwb3J0IGNvbnN0IGRtcGluZyA9IG5ldyBCb3RDb21tYW5kKFxuICBcImRtcGluZ1wiLFxuICBcIkp1c3Qgc2ltaWxhciB3aXRoKiAqKiotcGluZyoqKiAqY29tbWFuZC5cIixcbiAgZmFsc2UsXG4gIGZhbHNlLFxuICBSZXNwb25zZS5EaXJlY3RNZXNzYWdlLFxuICAzLFxuICBwaW5nRnVuY3Rpb25cbik7XG5leHBvcnQgY29uc3QgbG9nYWxsID0gbmV3IEJvdENvbW1hbmQoXG4gIFwibG9nYWxsXCIsXG4gIFwiRGV2ZWxvcGVyIG9ubHkuLlwiLFxuICBmYWxzZSxcbiAgZmFsc2UsXG4gIFJlc3BvbnNlLkRpcmVjdE1lc3NhZ2UsXG4gIDAsXG4gIGxvZ0FsbEZ1bmN0aW9uLFxuICBudWxsLFxuICB0cnVlXG4pO1xuIl19