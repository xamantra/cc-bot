"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const moment_1 = __importDefault(require("moment"));
const countdown_1 = __importDefault(require("countdown"));
class TimeHelper {
    static Countdown(seconds) {
        const _countdown = countdown_1.default(null, moment_1.default()
            .add(seconds, "s")
            .toDate(), countdown_1.default.DEFAULTS, 2);
        return _countdown.toString();
    }
    static Elapsed(timestamp) {
        const elapsed = moment_1.default(moment_1.default.unix(timestamp)).fromNow();
        return elapsed;
    }
    static Date(timestamp) {
        const date = moment_1.default(moment_1.default.unix(timestamp)).toDate();
        return date;
    }
    static YearMonthDay(y, m, d) {
        let yearmonthday;
        if (y !== null && m !== null && d !== null) {
            yearmonthday = moment_1.default(`${y}-${m}-${m}`).format("YYYY MMM D");
        }
        else if (y !== null && m !== null) {
            yearmonthday = moment_1.default(`${y}-${m}`).format("YYYY MMMM");
        }
        else if (y !== null) {
            yearmonthday = moment_1.default(`${y}`).format("YYYY");
        }
        else {
            yearmonthday = "Unknown";
        }
        return yearmonthday;
    }
    static Seconds(milliseconds) {
        const diff = milliseconds / 1000;
        const diffString = diff.toString();
        return diffString.substr(0, 3);
    }
    static DiffSeconds(a, b) {
        const bMoment = moment_1.default(b);
        const aMoment = moment_1.default(a);
        const diff = aMoment.diff(bMoment);
        return Number(this.Seconds(diff));
    }
}
exports.TimeHelper = TimeHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGVscGVycy90aW1lLmhlbHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9EQUE0QjtBQUM1QiwwREFBa0M7QUFFbEMsTUFBYSxVQUFVO0lBQ2QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFlO1FBQ3JDLE1BQU0sVUFBVSxHQUFRLG1CQUFTLENBQy9CLElBQUksRUFDSixnQkFBTSxFQUFFO2FBQ0wsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7YUFDakIsTUFBTSxFQUFFLEVBQ1gsbUJBQVMsQ0FBQyxRQUFRLEVBQ2xCLENBQUMsQ0FDRixDQUFDO1FBQ0YsT0FBTyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUI7UUFDckMsTUFBTSxPQUFPLEdBQUcsZ0JBQU0sQ0FBQyxnQkFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3pELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQWlCO1FBQ2xDLE1BQU0sSUFBSSxHQUFHLGdCQUFNLENBQUMsZ0JBQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNyRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUztRQUN4RCxJQUFJLFlBQW9CLENBQUM7UUFDekIsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMxQyxZQUFZLEdBQUcsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDOUQ7YUFBTSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNuQyxZQUFZLEdBQUcsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUN4RDthQUFNLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNyQixZQUFZLEdBQUcsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDTCxZQUFZLEdBQUcsU0FBUyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBb0I7UUFDeEMsTUFBTSxJQUFJLEdBQUcsWUFBWSxHQUFHLElBQUksQ0FBQztRQUNqQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFPLEVBQUUsQ0FBTztRQUN4QyxNQUFNLE9BQU8sR0FBRyxnQkFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sT0FBTyxHQUFHLGdCQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBakRELGdDQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb21lbnQgZnJvbSBcIm1vbWVudFwiO1xyXG5pbXBvcnQgY291bnRkb3duIGZyb20gXCJjb3VudGRvd25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUaW1lSGVscGVyIHtcclxuICBwdWJsaWMgc3RhdGljIENvdW50ZG93bihzZWNvbmRzOiBudW1iZXIpIHtcclxuICAgIGNvbnN0IF9jb3VudGRvd246IGFueSA9IGNvdW50ZG93bihcclxuICAgICAgbnVsbCxcclxuICAgICAgbW9tZW50KClcclxuICAgICAgICAuYWRkKHNlY29uZHMsIFwic1wiKVxyXG4gICAgICAgIC50b0RhdGUoKSxcclxuICAgICAgY291bnRkb3duLkRFRkFVTFRTLFxyXG4gICAgICAyXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIF9jb3VudGRvd24udG9TdHJpbmcoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRWxhcHNlZCh0aW1lc3RhbXA6IG51bWJlcikge1xyXG4gICAgY29uc3QgZWxhcHNlZCA9IG1vbWVudChtb21lbnQudW5peCh0aW1lc3RhbXApKS5mcm9tTm93KCk7XHJcbiAgICByZXR1cm4gZWxhcHNlZDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgRGF0ZSh0aW1lc3RhbXA6IG51bWJlcikge1xyXG4gICAgY29uc3QgZGF0ZSA9IG1vbWVudChtb21lbnQudW5peCh0aW1lc3RhbXApKS50b0RhdGUoKTtcclxuICAgIHJldHVybiBkYXRlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBZZWFyTW9udGhEYXkoeTogbnVtYmVyLCBtOiBudW1iZXIsIGQ6IG51bWJlcikge1xyXG4gICAgbGV0IHllYXJtb250aGRheTogc3RyaW5nO1xyXG4gICAgaWYgKHkgIT09IG51bGwgJiYgbSAhPT0gbnVsbCAmJiBkICE9PSBudWxsKSB7XHJcbiAgICAgIHllYXJtb250aGRheSA9IG1vbWVudChgJHt5fS0ke219LSR7bX1gKS5mb3JtYXQoXCJZWVlZIE1NTSBEXCIpO1xyXG4gICAgfSBlbHNlIGlmICh5ICE9PSBudWxsICYmIG0gIT09IG51bGwpIHtcclxuICAgICAgeWVhcm1vbnRoZGF5ID0gbW9tZW50KGAke3l9LSR7bX1gKS5mb3JtYXQoXCJZWVlZIE1NTU1cIik7XHJcbiAgICB9IGVsc2UgaWYgKHkgIT09IG51bGwpIHtcclxuICAgICAgeWVhcm1vbnRoZGF5ID0gbW9tZW50KGAke3l9YCkuZm9ybWF0KFwiWVlZWVwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHllYXJtb250aGRheSA9IFwiVW5rbm93blwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHllYXJtb250aGRheTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgU2Vjb25kcyhtaWxsaXNlY29uZHM6IG51bWJlcikge1xyXG4gICAgY29uc3QgZGlmZiA9IG1pbGxpc2Vjb25kcyAvIDEwMDA7XHJcbiAgICBjb25zdCBkaWZmU3RyaW5nID0gZGlmZi50b1N0cmluZygpO1xyXG4gICAgcmV0dXJuIGRpZmZTdHJpbmcuc3Vic3RyKDAsIDMpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBEaWZmU2Vjb25kcyhhOiBEYXRlLCBiOiBEYXRlKSB7XHJcbiAgICBjb25zdCBiTW9tZW50ID0gbW9tZW50KGIpO1xyXG4gICAgY29uc3QgYU1vbWVudCA9IG1vbWVudChhKTtcclxuICAgIGNvbnN0IGRpZmYgPSBhTW9tZW50LmRpZmYoYk1vbWVudCk7XHJcbiAgICByZXR1cm4gTnVtYmVyKHRoaXMuU2Vjb25kcyhkaWZmKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==