"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const media_status_1 = require("./../core/media.status");
const subscription_data_1 = require("./subscription.data");
const json_helper_1 = require("../helpers/json.helper");
const table_1 = require("../core/table");
const subscription_model_1 = require("../models/subscription.model");
const array_helper_1 = require("../helpers/array.helper");
const user_data_1 = require("./user.data");
const queue_data_1 = require("./queue.data");
const random_helper_1 = require("../helpers/random.helper");
const mongo_1 = require("../core/mongo");
const anime_cache_1 = require("../core/anime.cache");
class MediaData {
    static get GetLocalList() {
        return this.LocalList;
    }
    static get GetMediaList() {
        return this.MediaList;
    }
    static async Init() {
        return new Promise(async (resolve, reject) => {
            await this.Clear();
            this.Initializing = true;
            const result = await mongo_1.Mongo.FindAll(table_1.Table.media);
            const $result = await json_helper_1.JsonHelper.ArrayConvert(result, subscription_model_1.Media);
            if ($result === undefined || $result === null) {
                reject(new Error(`"JsonHelper.ArrayConvert<Media>(result, Media)" is 'null' or 'undefined'.`));
            }
            else {
                if ($result.length === 0) {
                    resolve();
                }
                for (let i = 0; i < $result.length; i++) {
                    const m = $result[i];
                    this.LocalList.push(m);
                    if (i === $result.length - 1) {
                        await this.LoadFromApi().catch((reason) => {
                            console.log(reason.message);
                        });
                        console.log(`Media List Length: ${this.MediaList.length}`);
                        resolve();
                    }
                }
            }
        });
    }
    static async Clear() {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            this.LocalList.length = 0;
            this.MediaList.length = 0;
            this.LocalList.splice(0, this.LocalList.length);
            this.MediaList.splice(0, this.MediaList.length);
            if (this.LocalList.length === 0 && this.MediaList.length === 0) {
                resolve();
            }
            else {
                reject(new Error(`The arrays were not cleared.`));
            }
        });
    }
    static async LoadFromApi() {
        return new Promise(async (resolve, reject) => {
            const userDatas = user_data_1.UserData.All;
            const locals = this.LocalList;
            if (userDatas === undefined || userDatas === null) {
                reject(new Error(`"userDatas = this.UserData.All" is 'null' or 'undefined'`));
            }
            else if (locals === undefined || locals === null) {
                reject(new Error(`"locals = this.LocalList" is 'null' or 'undefined'`));
            }
            else {
                for (let i = 0; i < locals.length; i++) {
                    const lm = locals[i];
                    const $m = await anime_cache_1.AnimeCache.Get(lm.MalId);
                    if ($m !== null &&
                        (media_status_1.MediaStatus.Ongoing($m) || media_status_1.MediaStatus.NotYetAired($m))) {
                        await queue_data_1.QueueData.Insert($m.idMal, $m.nextAiringEpisode.next).catch(() => {
                            this.Check(i, $m, resolve);
                        });
                        this.MediaList.push($m);
                        this.Check(i, $m, resolve);
                    }
                    else {
                        array_helper_1.ArrayHelper.remove(this.LocalList, lm, async () => {
                            const query = { _id: $m.idMal };
                            await mongo_1.Mongo.Delete(table_1.Table.media, query);
                            userDatas.forEach(async (x) => {
                                await subscription_data_1.SubscriptionData.Delete($m.idMal, x.DiscordId);
                                const jobs = await queue_data_1.QueueData.GetJobs();
                                jobs.forEach(qj => {
                                    queue_data_1.QueueData.RemoveJob(qj);
                                });
                            });
                            this.Check(i, $m, resolve);
                        });
                    }
                }
            }
        });
    }
    static Check(iteration, $m, res) {
        queue_data_1.QueueData.SetQueue($m);
        if (iteration === this.LocalList.length - 1) {
            this.Initializing = false;
            res();
        }
    }
    static async Insert(media, title, user = null) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            const exists = await this.Exists(media.idMal);
            if (exists === false) {
                const data = { _id: media.idMal, title: title };
                const result = await mongo_1.Mongo.Insert(table_1.Table.media, data);
                if (result.insertedId !== undefined && result.insertedId !== null) {
                    const m = new subscription_model_1.Media();
                    m.MalId = media.idMal;
                    m.Title = title;
                    this.LocalList.push(m);
                    if (media_status_1.MediaStatus.Ongoing(media) || media_status_1.MediaStatus.NotYetAired(media)) {
                        this.MediaList.push(media);
                        await queue_data_1.QueueData.Insert(media.idMal, media.nextAiringEpisode.next).catch((reason) => {
                            console.log(reason.message);
                        });
                        resolve(media.idMal);
                    }
                }
            }
            else {
                resolve(media.idMal);
            }
        });
    }
    static GetMedia(malId) {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            let iteration = 0;
            this.MediaList.forEach($m => {
                iteration++;
                if ($m.idMal === malId) {
                    resolve($m);
                }
                if (iteration === this.MediaList.length) {
                    reject(new Error(`NO media with id "${malId}" was found.`));
                }
            });
        });
    }
    static GetRandom() {
        return new Promise(async (resolve, reject) => {
            await this.OnReady();
            setInterval(() => {
                const media = this.MediaList[random_helper_1.Random.Range(0, this.MediaList.length - 1)];
                if (media !== null && media !== undefined) {
                    resolve(media);
                }
            }, 0);
        });
    }
    static async LogAll() {
        return new Promise(async (res, rej) => {
            await this.OnReady();
            console.log(this.LocalList);
            res();
        });
    }
    static async Exists(malId) {
        return new Promise(async (res, rej) => {
            await this.OnReady();
            const m = this.LocalList.find(x => x.MalId === malId);
            if (m === null || m === undefined) {
                res(false);
            }
            else {
                res(true);
            }
        });
    }
    static OnReady() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Initializing === false) {
                    resolve();
                }
            }, 1);
        });
    }
}
MediaData.LocalList = [];
MediaData.MediaList = [];
MediaData.Initializing = false;
exports.MediaData = MediaData;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kYXRhL21lZGlhLmRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5REFBcUQ7QUFDckQsMkRBQXVEO0FBQ3ZELHdEQUFvRDtBQUNwRCx5Q0FBc0M7QUFDdEMscUVBQTJEO0FBRTNELDBEQUFzRDtBQUN0RCwyQ0FBdUM7QUFDdkMsNkNBQXlDO0FBQ3pDLDREQUFrRDtBQUNsRCx5Q0FBc0M7QUFDdEMscURBQWlEO0FBRWpELE1BQWEsU0FBUztJQUNiLE1BQU0sS0FBSyxZQUFZO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBRU0sTUFBTSxLQUFLLFlBQVk7UUFDNUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7SUFNTSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUk7UUFDdEIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLE1BQU0sTUFBTSxHQUFHLE1BQU0sYUFBSyxDQUFDLE9BQU8sQ0FBQyxhQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDaEQsTUFBTSxPQUFPLEdBQUcsTUFBTSx3QkFBVSxDQUFDLFlBQVksQ0FBUSxNQUFNLEVBQUUsMEJBQUssQ0FBQyxDQUFDO1lBQ3BFLElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO2dCQUM3QyxNQUFNLENBQ0osSUFBSSxLQUFLLENBQ1AsMkVBQTJFLENBQzVFLENBQ0YsQ0FBQzthQUNIO2lCQUFNO2dCQUNMLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQ3hCLE9BQU8sRUFBRSxDQUFDO2lCQUNYO2dCQUNE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QyxNQUFNLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNyQixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2pDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNaO2lCQUFNO2dCQUNMLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNYO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU87UUFDbkIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUNmLElBQUksSUFBSSxDQUFDLFlBQVksS0FBSyxLQUFLLEVBQUU7b0JBQy9CLE9BQU8sRUFBRSxDQUFDO2lCQUNYO1lBQ0gsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztBQWpNYyxtQkFBUyxHQUFZLEVBQUUsQ0FBQztBQUN4QixtQkFBUyxHQUFhLEVBQUUsQ0FBQztBQUMxQixzQkFBWSxHQUFHLEtBQUssQ0FBQztBQVhyQyw4QkEyTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZWRpYVN0YXR1cyB9IGZyb20gXCIuLy4uL2NvcmUvbWVkaWEuc3RhdHVzXCI7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkRhdGEgfSBmcm9tIFwiLi9zdWJzY3JpcHRpb24uZGF0YVwiO1xyXG5pbXBvcnQgeyBKc29uSGVscGVyIH0gZnJvbSBcIi4uL2hlbHBlcnMvanNvbi5oZWxwZXJcIjtcclxuaW1wb3J0IHsgVGFibGUgfSBmcm9tIFwiLi4vY29yZS90YWJsZVwiO1xyXG5pbXBvcnQgeyBNZWRpYSwgVXNlciB9IGZyb20gXCIuLi9tb2RlbHMvc3Vic2NyaXB0aW9uLm1vZGVsXCI7XHJcbmltcG9ydCB7IElNZWRpYSB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL3BhZ2UuaW50ZXJmYWNlXCI7XHJcbmltcG9ydCB7IEFycmF5SGVscGVyIH0gZnJvbSBcIi4uL2hlbHBlcnMvYXJyYXkuaGVscGVyXCI7XHJcbmltcG9ydCB7IFVzZXJEYXRhIH0gZnJvbSBcIi4vdXNlci5kYXRhXCI7XHJcbmltcG9ydCB7IFF1ZXVlRGF0YSB9IGZyb20gXCIuL3F1ZXVlLmRhdGFcIjtcclxuaW1wb3J0IHsgUmFuZG9tIH0gZnJvbSBcIi4uL2hlbHBlcnMvcmFuZG9tLmhlbHBlclwiO1xyXG5pbXBvcnQgeyBNb25nbyB9IGZyb20gXCIuLi9jb3JlL21vbmdvXCI7XHJcbmltcG9ydCB7IEFuaW1lQ2FjaGUgfSBmcm9tIFwiLi4vY29yZS9hbmltZS5jYWNoZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lZGlhRGF0YSB7XHJcbiAgcHVibGljIHN0YXRpYyBnZXQgR2V0TG9jYWxMaXN0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuTG9jYWxMaXN0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBnZXQgR2V0TWVkaWFMaXN0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuTWVkaWFMaXN0O1xyXG4gIH1cclxuICBzdGF0aWMgX2luc3RhbmNlOiBNZWRpYURhdGE7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgTG9jYWxMaXN0OiBNZWRpYVtdID0gW107XHJcbiAgcHJpdmF0ZSBzdGF0aWMgTWVkaWFMaXN0OiBJTWVkaWFbXSA9IFtdO1xyXG4gIHB1YmxpYyBzdGF0aWMgSW5pdGlhbGl6aW5nID0gZmFsc2U7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgSW5pdCgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGF3YWl0IHRoaXMuQ2xlYXIoKTtcclxuICAgICAgdGhpcy5Jbml0aWFsaXppbmcgPSB0cnVlO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBNb25nby5GaW5kQWxsKFRhYmxlLm1lZGlhKTtcclxuICAgICAgY29uc3QgJHJlc3VsdCA9IGF3YWl0IEpzb25IZWxwZXIuQXJyYXlDb252ZXJ0PE1lZGlhPihyZXN1bHQsIE1lZGlhKTtcclxuICAgICAgaWYgKCRyZXN1bHQgPT09IHVuZGVmaW5lZCB8fCAkcmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgICAgcmVqZWN0KFxyXG4gICAgICAgICAgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICBgXCJKc29uSGVscGVyLkFycmF5Q29udmVydDxNZWRpYT4ocmVzdWx0LCBNZWRpYSlcIiBpcyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCcuYFxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCRyZXN1bHQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgJHJlc3VsdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgY29uc3QgbSA9ICRyZXN1bHRbaV07XHJcbiAgICAgICAgICB0aGlzLkxvY2FsTGlzdC5wdXNoKG0pO1xyXG4gICAgICAgICAgaWYgKGkgPT09ICRyZXN1bHQubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLkxvYWRGcm9tQXBpKCkuY2F0Y2goKHJlYXNvbjogRXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZWFzb24ubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTWVkaWEgTGlzdCBMZW5ndGg6ICR7dGhpcy5NZWRpYUxpc3QubGVuZ3RofWApO1xyXG4gICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgQ2xlYXIoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBhd2FpdCB0aGlzLk9uUmVhZHkoKTtcclxuICAgICAgdGhpcy5Mb2NhbExpc3QubGVuZ3RoID0gMDtcclxuICAgICAgdGhpcy5NZWRpYUxpc3QubGVuZ3RoID0gMDtcclxuICAgICAgdGhpcy5Mb2NhbExpc3Quc3BsaWNlKDAsIHRoaXMuTG9jYWxMaXN0Lmxlbmd0aCk7XHJcbiAgICAgIHRoaXMuTWVkaWFMaXN0LnNwbGljZSgwLCB0aGlzLk1lZGlhTGlzdC5sZW5ndGgpO1xyXG4gICAgICBpZiAodGhpcy5Mb2NhbExpc3QubGVuZ3RoID09PSAwICYmIHRoaXMuTWVkaWFMaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3QobmV3IEVycm9yKGBUaGUgYXJyYXlzIHdlcmUgbm90IGNsZWFyZWQuYCkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgTG9hZEZyb21BcGkoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBjb25zdCB1c2VyRGF0YXMgPSBVc2VyRGF0YS5BbGw7XHJcbiAgICAgIGNvbnN0IGxvY2FscyA9IHRoaXMuTG9jYWxMaXN0O1xyXG4gICAgICBpZiAodXNlckRhdGFzID09PSB1bmRlZmluZWQgfHwgdXNlckRhdGFzID09PSBudWxsKSB7XHJcbiAgICAgICAgcmVqZWN0KFxyXG4gICAgICAgICAgbmV3IEVycm9yKGBcInVzZXJEYXRhcyA9IHRoaXMuVXNlckRhdGEuQWxsXCIgaXMgJ251bGwnIG9yICd1bmRlZmluZWQnYClcclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2UgaWYgKGxvY2FscyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FscyA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFwibG9jYWxzID0gdGhpcy5Mb2NhbExpc3RcIiBpcyAnbnVsbCcgb3IgJ3VuZGVmaW5lZCdgKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGxtID0gbG9jYWxzW2ldO1xyXG4gICAgICAgICAgY29uc3QgJG0gPSBhd2FpdCBBbmltZUNhY2hlLkdldChsbS5NYWxJZCk7XHJcbiAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICRtICE9PSBudWxsICYmXHJcbiAgICAgICAgICAgIChNZWRpYVN0YXR1cy5PbmdvaW5nKCRtKSB8fCBNZWRpYVN0YXR1cy5Ob3RZZXRBaXJlZCgkbSkpXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgYXdhaXQgUXVldWVEYXRhLkluc2VydCgkbS5pZE1hbCwgJG0ubmV4dEFpcmluZ0VwaXNvZGUubmV4dCkuY2F0Y2goXHJcbiAgICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5DaGVjayhpLCAkbSwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLk1lZGlhTGlzdC5wdXNoKCRtKTtcclxuICAgICAgICAgICAgdGhpcy5DaGVjayhpLCAkbSwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBBcnJheUhlbHBlci5yZW1vdmUodGhpcy5Mb2NhbExpc3QsIGxtLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgcXVlcnkgPSB7IF9pZDogJG0uaWRNYWwgfTtcclxuICAgICAgICAgICAgICBhd2FpdCBNb25nby5EZWxldGUoVGFibGUubWVkaWEsIHF1ZXJ5KTtcclxuICAgICAgICAgICAgICB1c2VyRGF0YXMuZm9yRWFjaChhc3luYyB4ID0+IHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IFN1YnNjcmlwdGlvbkRhdGEuRGVsZXRlKCRtLmlkTWFsLCB4LkRpc2NvcmRJZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBqb2JzID0gYXdhaXQgUXVldWVEYXRhLkdldEpvYnMoKTtcclxuICAgICAgICAgICAgICAgIGpvYnMuZm9yRWFjaChxaiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIFF1ZXVlRGF0YS5SZW1vdmVKb2IocWopO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5DaGVjayhpLCAkbSwgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBDaGVjayhcclxuICAgIGl0ZXJhdGlvbjogbnVtYmVyLFxyXG4gICAgJG06IElNZWRpYSxcclxuICAgIHJlczogKHZhbHVlPzogdm9pZCB8IFByb21pc2VMaWtlPHZvaWQ+KSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICBRdWV1ZURhdGEuU2V0UXVldWUoJG0pO1xyXG4gICAgaWYgKGl0ZXJhdGlvbiA9PT0gdGhpcy5Mb2NhbExpc3QubGVuZ3RoIC0gMSkge1xyXG4gICAgICB0aGlzLkluaXRpYWxpemluZyA9IGZhbHNlO1xyXG4gICAgICByZXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgSW5zZXJ0KG1lZGlhOiBJTWVkaWEsIHRpdGxlOiBzdHJpbmcsIHVzZXI6IFVzZXIgPSBudWxsKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8bnVtYmVyPihhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGF3YWl0IHRoaXMuT25SZWFkeSgpO1xyXG4gICAgICBjb25zdCBleGlzdHMgPSBhd2FpdCB0aGlzLkV4aXN0cyhtZWRpYS5pZE1hbCk7XHJcbiAgICAgIGlmIChleGlzdHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHsgX2lkOiBtZWRpYS5pZE1hbCwgdGl0bGU6IHRpdGxlIH07XHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgTW9uZ28uSW5zZXJ0KFRhYmxlLm1lZGlhLCBkYXRhKTtcclxuICAgICAgICBpZiAocmVzdWx0Lmluc2VydGVkSWQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQuaW5zZXJ0ZWRJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgY29uc3QgbSA9IG5ldyBNZWRpYSgpO1xyXG4gICAgICAgICAgbS5NYWxJZCA9IG1lZGlhLmlkTWFsO1xyXG4gICAgICAgICAgbS5UaXRsZSA9IHRpdGxlO1xyXG4gICAgICAgICAgdGhpcy5Mb2NhbExpc3QucHVzaChtKTtcclxuICAgICAgICAgIGlmIChNZWRpYVN0YXR1cy5PbmdvaW5nKG1lZGlhKSB8fCBNZWRpYVN0YXR1cy5Ob3RZZXRBaXJlZChtZWRpYSkpIHtcclxuICAgICAgICAgICAgdGhpcy5NZWRpYUxpc3QucHVzaChtZWRpYSk7XHJcbiAgICAgICAgICAgIGF3YWl0IFF1ZXVlRGF0YS5JbnNlcnQoXHJcbiAgICAgICAgICAgICAgbWVkaWEuaWRNYWwsXHJcbiAgICAgICAgICAgICAgbWVkaWEubmV4dEFpcmluZ0VwaXNvZGUubmV4dFxyXG4gICAgICAgICAgICApLmNhdGNoKChyZWFzb246IEVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVhc29uLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZWRpYS5pZE1hbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUobWVkaWEuaWRNYWwpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgR2V0TWVkaWEobWFsSWQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPElNZWRpYT4oYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBhd2FpdCB0aGlzLk9uUmVhZHkoKTtcclxuICAgICAgbGV0IGl0ZXJhdGlvbiA9IDA7XHJcbiAgICAgIHRoaXMuTWVkaWFMaXN0LmZvckVhY2goJG0gPT4ge1xyXG4gICAgICAgIGl0ZXJhdGlvbisrO1xyXG4gICAgICAgIGlmICgkbS5pZE1hbCA9PT0gbWFsSWQpIHtcclxuICAgICAgICAgIHJlc29sdmUoJG0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlcmF0aW9uID09PSB0aGlzLk1lZGlhTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYE5PIG1lZGlhIHdpdGggaWQgXCIke21hbElkfVwiIHdhcyBmb3VuZC5gKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBHZXRSYW5kb20oKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8SU1lZGlhPihhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGF3YWl0IHRoaXMuT25SZWFkeSgpO1xyXG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWVkaWEgPSB0aGlzLk1lZGlhTGlzdFtcclxuICAgICAgICAgIFJhbmRvbS5SYW5nZSgwLCB0aGlzLk1lZGlhTGlzdC5sZW5ndGggLSAxKVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgaWYgKG1lZGlhICE9PSBudWxsICYmIG1lZGlhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJlc29sdmUobWVkaWEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgMCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgTG9nQWxsKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXMsIHJlaikgPT4ge1xyXG4gICAgICBhd2FpdCB0aGlzLk9uUmVhZHkoKTtcclxuICAgICAgY29uc29sZS5sb2codGhpcy5Mb2NhbExpc3QpO1xyXG4gICAgICByZXMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBhc3luYyBFeGlzdHMobWFsSWQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KGFzeW5jIChyZXMsIHJlaikgPT4ge1xyXG4gICAgICBhd2FpdCB0aGlzLk9uUmVhZHkoKTtcclxuICAgICAgY29uc3QgbSA9IHRoaXMuTG9jYWxMaXN0LmZpbmQoeCA9PiB4Lk1hbElkID09PSBtYWxJZCk7XHJcbiAgICAgIGlmIChtID09PSBudWxsIHx8IG0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJlcyhmYWxzZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgT25SZWFkeSgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5Jbml0aWFsaXppbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAxKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=