"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const media_search_1 = require("./media.search");
const array_helper_1 = require("../helpers/array.helper");
const random_helper_1 = require("../helpers/random.helper");
const queue_data_1 = require("../data/queue.data");
class AnimeCache {
    static async Update(index) {
        setTimeout(async () => {
            if (this.List.length > 0) {
                const local = this.List[index];
                if (local !== null && local !== undefined) {
                    const fromApi = await media_search_1.MediaSearch.Find(local.idMal);
                    if (fromApi !== null && fromApi !== undefined) {
                        array_helper_1.ArrayHelper.remove(this.List, local, async () => {
                            const exists = await this.Exists(fromApi.idMal);
                            if (exists === false)
                                this.List.push(fromApi);
                            this.Check(index + 1);
                        });
                    }
                    else {
                        this.Check(index + 1);
                    }
                }
                else {
                    this.Check(0);
                }
            }
            else {
                this.Check(0);
            }
        }, 3000);
    }
    static Exists(id) {
        return new Promise((resolve, reject) => {
            const existing = this.List.find(x => x.idMal === id);
            if (existing !== null && existing !== undefined) {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    }
    static Check(index) {
        if (index === this.List.length - 1) {
            this.Update(0);
        }
        else {
            this.Update(index + 1);
        }
    }
    static async Get(id) {
        return new Promise(async (resolve, reject) => {
            const local = this.List.find(x => x.idMal === id);
            let fromApi = null;
            if (local !== null && local !== undefined) {
                resolve(local);
            }
            else {
                fromApi = await media_search_1.MediaSearch.Find(id);
                if (fromApi === null || fromApi === undefined) {
                    resolve(null);
                }
                const exists = await this.Exists(fromApi.idMal);
                if (exists === false)
                    this.List.push(fromApi);
                queue_data_1.QueueData.SetQueue(fromApi);
                resolve(fromApi);
            }
        });
    }
    static GetRandom() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                const random = this.List[random_helper_1.Random.Range(0, this.List.length - 1)];
                if (random !== null && random !== undefined)
                    resolve(random);
            }, 1);
        });
    }
    static async Search(keyword) {
        return new Promise(async (resolve, reject) => {
            const found = [];
            const length = this.List.length;
            if (length === 0) {
                const fromApi = await media_search_1.MediaSearch.All(keyword);
                this.List.concat(fromApi);
                resolve(fromApi);
            }
            for (let i = 0; i < length; i++) {
                const anime = this.List[i];
                const english = anime.title.english;
                const romaji = anime.title.romaji;
                let media = null;
                if (english !== null && english !== undefined) {
                    const match = await this.ScanMatch(keyword, english);
                    if (match === true) {
                        media = anime;
                    }
                }
                if (romaji !== null && romaji !== undefined) {
                    const match = await this.ScanMatch(keyword, romaji);
                    if (match === true) {
                        media = anime;
                    }
                }
                if (media !== null)
                    found.push(media);
                if (i === length - 1) {
                    if (found.length === 0) {
                        const apiResult = await media_search_1.MediaSearch.All(keyword);
                        if (apiResult.length > 0) {
                            for (let x = 0; x < apiResult.length; x++) {
                                const fromApi = apiResult[x];
                                const exists = await this.Exists(fromApi.idMal);
                                if (exists === false)
                                    this.List.push(fromApi);
                                if (x === apiResult.length - 1) {
                                    resolve(apiResult);
                                }
                            }
                        }
                        else {
                            resolve(found);
                        }
                    }
                    else {
                        resolve(found);
                    }
                }
            }
        });
    }
    static async ScanMatch(keyword, title) {
        return new Promise(async (resolve, reject) => {
            const match = await this.ScanTitle(keyword, title);
            if (match < 0) {
                resolve(false);
            }
            else {
                resolve(true);
            }
        });
    }
    static async ScanTitle(keyword, title) {
        return new Promise((resolve, reject) => {
            const keywords = keyword.split(/ +/g);
            let match = 0;
            for (let i = 0; i < keywords.length; i++) {
                const word = keywords[i];
                if (title.toLowerCase().includes(word)) {
                    match++;
                }
                if (i === keywords.length - 1) {
                    if (match === keywords.length)
                        resolve(match);
                    else
                        resolve(-1);
                }
            }
        });
    }
}
AnimeCache.List = [];
exports.AnimeCache = AnimeCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWUuY2FjaGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29yZS9hbmltZS5jYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLGlEQUE2QztBQUM3QywwREFBc0Q7QUFFdEQsNERBQWtEO0FBQ2xELG1EQUErQztBQUcvQyxNQUFhLFVBQVU7SUFHZCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFhO1FBQ3RDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUNwQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDeEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7b0JBQ3pDLE1BQU0sT0FBTyxHQUFHLE1BQU0sMEJBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNwRCxJQUFJLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTt3QkFDN0MsMEJBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxJQUFJLEVBQUU7NEJBQzlDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQ2hELElBQUksTUFBTSxLQUFLLEtBQUs7Z0NBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7NEJBQzlDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO3dCQUN4QixDQUFDLENBQUMsQ0FBQztxQkFDSjt5QkFBTTt3QkFDTCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMs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QUFDLENBQUMsQ0FBQztpQkFDbEI7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFySmMsZUFBSSxHQUFhLEVBQUUsQ0FBQztBQURyQyxnQ0F1SkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJTWVkaWEgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9wYWdlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQgeyBNZWRpYVNlYXJjaCB9IGZyb20gXCIuL21lZGlhLnNlYXJjaFwiO1xyXG5pbXBvcnQgeyBBcnJheUhlbHBlciB9IGZyb20gXCIuLi9oZWxwZXJzL2FycmF5LmhlbHBlclwiO1xyXG5pbXBvcnQgdW5pcXVlIGZyb20gXCJhcnJheS11bmlxdWVcIjtcclxuaW1wb3J0IHsgUmFuZG9tIH0gZnJvbSBcIi4uL2hlbHBlcnMvcmFuZG9tLmhlbHBlclwiO1xyXG5pbXBvcnQgeyBRdWV1ZURhdGEgfSBmcm9tIFwiLi4vZGF0YS9xdWV1ZS5kYXRhXCI7XHJcbmltcG9ydCB7IE1lZGlhU3RhdHVzIH0gZnJvbSBcIi4vbWVkaWEuc3RhdHVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQW5pbWVDYWNoZSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgTGlzdDogSU1lZGlhW10gPSBbXTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBhc3luYyBVcGRhdGUoaW5kZXg6IG51bWJlcikge1xyXG4gICAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLkxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGxvY2FsID0gdGhpcy5MaXN0W2luZGV4XTtcclxuICAgICAgICBpZiAobG9jYWwgIT09IG51bGwgJiYgbG9jYWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgY29uc3QgZnJvbUFwaSA9IGF3YWl0IE1lZGlhU2VhcmNoLkZpbmQobG9jYWwuaWRNYWwpO1xyXG4gICAgICAgICAgaWYgKGZyb21BcGkgIT09IG51bGwgJiYgZnJvbUFwaSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIEFycmF5SGVscGVyLnJlbW92ZSh0aGlzLkxpc3QsIGxvY2FsLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5FeGlzdHMoZnJvbUFwaS5pZE1hbCk7XHJcbiAgICAgICAgICAgICAgaWYgKGV4aXN0cyA9PT0gZmFsc2UpIHRoaXMuTGlzdC5wdXNoKGZyb21BcGkpO1xyXG4gICAgICAgICAgICAgIHRoaXMuQ2hlY2soaW5kZXggKyAxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLkNoZWNrKGluZGV4ICsgMSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuQ2hlY2soMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuQ2hlY2soMCk7XHJcbiAgICAgIH1cclxuICAgIH0sIDMwMDApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgRXhpc3RzKGlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxib29sZWFuPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5MaXN0LmZpbmQoeCA9PiB4LmlkTWFsID09PSBpZCk7XHJcbiAgICAgIGlmIChleGlzdGluZyAhPT0gbnVsbCAmJiBleGlzdGluZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBDaGVjayhpbmRleDogbnVtYmVyKSB7XHJcbiAgICBpZiAoaW5kZXggPT09IHRoaXMuTGlzdC5sZW5ndGggLSAxKSB7XHJcbiAgICAgIHRoaXMuVXBkYXRlKDApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5VcGRhdGUoaW5kZXggKyAxKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgR2V0KGlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxJTWVkaWE+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgbG9jYWwgPSB0aGlzLkxpc3QuZmluZCh4ID0+IHguaWRNYWwgPT09IGlkKTtcclxuICAgICAgbGV0IGZyb21BcGk6IElNZWRpYSA9IG51bGw7XHJcbiAgICAgIGlmIChsb2NhbCAhPT0gbnVsbCAmJiBsb2NhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmVzb2x2ZShsb2NhbCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZnJvbUFwaSA9IGF3YWl0IE1lZGlhU2VhcmNoLkZpbmQoaWQpO1xyXG4gICAgICAgIGlmIChmcm9tQXBpID09PSBudWxsIHx8IGZyb21BcGkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5FeGlzdHMoZnJvbUFwaS5pZE1hbCk7XHJcbiAgICAgICAgaWYgKGV4aXN0cyA9PT0gZmFsc2UpIHRoaXMuTGlzdC5wdXNoKGZyb21BcGkpO1xyXG4gICAgICAgIFF1ZXVlRGF0YS5TZXRRdWV1ZShmcm9tQXBpKTtcclxuICAgICAgICByZXNvbHZlKGZyb21BcGkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgR2V0UmFuZG9tKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPElNZWRpYT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcmFuZG9tID0gdGhpcy5MaXN0W1JhbmRvbS5SYW5nZSgwLCB0aGlzLkxpc3QubGVuZ3RoIC0gMSldO1xyXG4gICAgICAgIGlmIChyYW5kb20gIT09IG51bGwgJiYgcmFuZG9tICE9PSB1bmRlZmluZWQpIHJlc29sdmUocmFuZG9tKTtcclxuICAgICAgfSwgMSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgU2VhcmNoKGtleXdvcmQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPElNZWRpYVtdPihhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IGZvdW5kOiBJTWVkaWFbXSA9IFtdO1xyXG4gICAgICBjb25zdCBsZW5ndGggPSB0aGlzLkxpc3QubGVuZ3RoO1xyXG4gICAgICBpZiAobGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgY29uc3QgZnJvbUFwaSA9IGF3YWl0IE1lZGlhU2VhcmNoLkFsbChrZXl3b3JkKTtcclxuICAgICAgICB0aGlzLkxpc3QuY29uY2F0KGZyb21BcGkpO1xyXG4gICAgICAgIHJlc29sdmUoZnJvbUFwaSk7XHJcbiAgICAgIH1cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGFuaW1lID0gdGhpcy5MaXN0W2ldO1xyXG4gICAgICAgIGNvbnN0IGVuZ2xpc2ggPSBhbmltZS50aXRsZS5lbmdsaXNoO1xyXG4gICAgICAgIGNvbnN0IHJvbWFqaSA9IGFuaW1lLnRpdGxlLnJvbWFqaTtcclxuICAgICAgICBsZXQgbWVkaWE6IElNZWRpYSA9IG51bGw7XHJcbiAgICAgICAgaWYgKGVuZ2xpc2ggIT09IG51bGwgJiYgZW5nbGlzaCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IGF3YWl0IHRoaXMuU2Nhbk1hdGNoKGtleXdvcmQsIGVuZ2xpc2gpO1xyXG4gICAgICAgICAgaWYgKG1hdGNoID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIG1lZGlhID0gYW5pbWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyb21hamkgIT09IG51bGwgJiYgcm9tYWppICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGNvbnN0IG1hdGNoID0gYXdhaXQgdGhpcy5TY2FuTWF0Y2goa2V5d29yZCwgcm9tYWppKTtcclxuICAgICAgICAgIGlmIChtYXRjaCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBtZWRpYSA9IGFuaW1lO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWVkaWEgIT09IG51bGwpIGZvdW5kLnB1c2gobWVkaWEpO1xyXG4gICAgICAgIGlmIChpID09PSBsZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFwaVJlc3VsdCA9IGF3YWl0IE1lZGlhU2VhcmNoLkFsbChrZXl3b3JkKTtcclxuICAgICAgICAgICAgaWYgKGFwaVJlc3VsdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBhcGlSZXN1bHQubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZyb21BcGkgPSBhcGlSZXN1bHRbeF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdHMgPSBhd2FpdCB0aGlzLkV4aXN0cyhmcm9tQXBpLmlkTWFsKTtcclxuICAgICAgICAgICAgICAgIGlmIChleGlzdHMgPT09IGZhbHNlKSB0aGlzLkxpc3QucHVzaChmcm9tQXBpKTtcclxuICAgICAgICAgICAgICAgIGlmICh4ID09PSBhcGlSZXN1bHQubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGFwaVJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUoZm91bmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXNvbHZlKGZvdW5kKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgU2Nhbk1hdGNoKGtleXdvcmQ6IHN0cmluZywgdGl0bGU6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgbWF0Y2ggPSBhd2FpdCB0aGlzLlNjYW5UaXRsZShrZXl3b3JkLCB0aXRsZSk7XHJcbiAgICAgIGlmIChtYXRjaCA8IDApIHtcclxuICAgICAgICByZXNvbHZlKGZhbHNlKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGFzeW5jIFNjYW5UaXRsZShrZXl3b3JkOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxudW1iZXI+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3Qga2V5d29yZHMgPSBrZXl3b3JkLnNwbGl0KC8gKy9nKTtcclxuICAgICAgbGV0IG1hdGNoID0gMDtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXl3b3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHdvcmQgPSBrZXl3b3Jkc1tpXTtcclxuICAgICAgICBpZiAodGl0bGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyh3b3JkKSkge1xyXG4gICAgICAgICAgbWF0Y2grKztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgPT09IGtleXdvcmRzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgIGlmIChtYXRjaCA9PT0ga2V5d29yZHMubGVuZ3RoKSByZXNvbHZlKG1hdGNoKTtcclxuICAgICAgICAgIGVsc2UgcmVzb2x2ZSgtMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19