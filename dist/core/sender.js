"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Sender {
    static Send(message, content, isDM = false, callback) {
        if (isDM) {
            message.author
                .send(content)
                .then(($m) => {
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Message <${$m.id}> was sent to "${message.author.username}".`);
            })
                .catch((err) => {
                message.reply(`Oh!, it seems that I can't dm you.`);
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Sender.ts: "${err.message}"`);
            });
        }
        else {
            message
                .reply(content)
                .then(($m) => {
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Message <${$m.id}> was sent in <${message.channel.id}>.`);
            })
                .catch((err) => {
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Sender.ts: "${err.message}"`);
            });
        }
    }
    static SendInfo(message, content, isDM = false) {
        this.Send(message, content, isDM);
    }
}
exports.Sender = Sender;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvc2VuZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBYSxNQUFNO0lBQ1YsTUFBTSxDQUFDLElBQUksQ0FDaEIsT0FBZ0IsRUFDaEIsT0FBWSxFQUNaLE9BQWdCLEtBQUssRUFDckIsUUFBcUI7UUFFckIsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPLENBQUMsTUFBTTtpQkFDWCxJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUNiLElBQUksQ0FBQyxDQUFDLEVBQVcsRUFBRSxFQUFFO2dCQUNwQixJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtvQkFDL0MsUUFBUSxFQUFFLENBQUM7aUJBQ1o7Z0JBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FDVCxZQUFZLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUMvRCxDQUFDO1lBQ0osQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxDQUFDLEdBQW9CLEVBQUUsRUFBRTtnQkFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtvQkFDL0MsUUFBUSxFQUFFLENBQUM7aUJBQ1o7Z0JBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNMLE9BQU87aUJBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQztpQkFDZCxJQUFJLENBQUMsQ0FBQyxFQUFXLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7b0JBQy9DLFFBQVEsRUFBRSxDQUFDO2lCQUNaO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQ1QsWUFBWSxFQUFFLENBQUMsRUFBRSxrQkFBa0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FDMUQsQ0FBQztZQUNKLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxHQUFvQixFQUFFLEVBQUU7Z0JBQzlCLElBQUksUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO29CQUMvQyxRQUFRLEVBQUUsQ0FBQztpQkFDWjtnQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUNwQixPQUFnQixFQUNoQixPQUFZLEVBQ1osT0FBZ0IsS0FBSztRQUVyQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztDQUNGO0FBcERELHdCQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lc3NhZ2UsIERpc2NvcmRBUElFcnJvciB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBTZW5kZXIge1xuICBwdWJsaWMgc3RhdGljIFNlbmQoXG4gICAgbWVzc2FnZTogTWVzc2FnZSxcbiAgICBjb250ZW50OiBhbnksXG4gICAgaXNETTogYm9vbGVhbiA9IGZhbHNlLFxuICAgIGNhbGxiYWNrPzogKCkgPT4gdm9pZFxuICApIHtcbiAgICBpZiAoaXNETSkge1xuICAgICAgbWVzc2FnZS5hdXRob3JcbiAgICAgICAgLnNlbmQoY29udGVudClcbiAgICAgICAgLnRoZW4oKCRtOiBNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYE1lc3NhZ2UgPCR7JG0uaWR9PiB3YXMgc2VudCB0byBcIiR7bWVzc2FnZS5hdXRob3IudXNlcm5hbWV9XCIuYFxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBEaXNjb3JkQVBJRXJyb3IpID0+IHtcbiAgICAgICAgICBtZXNzYWdlLnJlcGx5KGBPaCEsIGl0IHNlZW1zIHRoYXQgSSBjYW4ndCBkbSB5b3UuYCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nKGBTZW5kZXIudHM6IFwiJHtlcnIubWVzc2FnZX1cImApO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZVxuICAgICAgICAucmVwbHkoY29udGVudClcbiAgICAgICAgLnRoZW4oKCRtOiBNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrICE9PSBudWxsICYmIGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYE1lc3NhZ2UgPCR7JG0uaWR9PiB3YXMgc2VudCBpbiA8JHttZXNzYWdlLmNoYW5uZWwuaWR9Pi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnI6IERpc2NvcmRBUElFcnJvcikgPT4ge1xuICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmxvZyhgU2VuZGVyLnRzOiBcIiR7ZXJyLm1lc3NhZ2V9XCJgKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBTZW5kSW5mbyhcbiAgICBtZXNzYWdlOiBNZXNzYWdlLFxuICAgIGNvbnRlbnQ6IGFueSxcbiAgICBpc0RNOiBib29sZWFuID0gZmFsc2VcbiAgKSB7XG4gICAgdGhpcy5TZW5kKG1lc3NhZ2UsIGNvbnRlbnQsIGlzRE0pO1xuICB9XG59XG4iXX0=