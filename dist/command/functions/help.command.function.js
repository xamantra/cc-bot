"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("../../core/client");
const manager_command_1 = require("../manager.command");
const config_1 = require("../../core/config");
class HelpFunction {
    constructor() { }
    async Execute(message, command, dm) {
        await this.ShowHelp(message, dm);
    }
    async ShowHelp(message, dm) {
        const embed = await this.Embed(message);
        process.on("unhandledRejection", console.log);
        if (dm) {
            message.member
                .send(embed)
                .then(($m) => {
                console.log(`Message <${$m.id}> was sent to "${message.author.username}".`);
            })
                .catch((err) => {
                console.log(err.name);
            });
        }
        else {
            message
                .reply(embed)
                .then(($m) => {
                console.log(`Message <${$m.id}> was sent in "<${message.channel.id}>".`);
            })
                .catch((err) => {
                console.log(err.name);
            });
        }
    }
    Embed(message) {
        return new Promise((resolve, reject) => {
            const botname = config_1.Config.BOT_NAME;
            const prefix = config_1.Config.COMMAND_PREFIX;
            const commands = manager_command_1.CommandManager.Commands;
            const client = client_1.ClientManager.Client;
            const list = [];
            commands.forEach(command => {
                if (command.DevOnly === false) {
                    list.push({
                        name: `\n***${prefix}${command.Name}***`,
                        value: `*${command.Description}*`
                    });
                }
            });
            const embed = {
                embed: {
                    color: message.member.highestRole.color,
                    thumbnail: {
                        url: client.user.avatarURL
                    },
                    title: `***${botname} Help Center***`,
                    description: `Hey **${message.member.user.username}**! This are my command list:`,
                    fields: list,
                    timestamp: new Date(),
                    footer: {
                        icon_url: client.user.avatarURL,
                        text: `Â© ${botname}`
                    }
                }
            };
            resolve(embed);
        });
    }
}
exports.HelpFunction = HelpFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5jb21tYW5kLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmQvZnVuY3Rpb25zL2hlbHAuY29tbWFuZC5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDhDQUFrRDtBQUVsRCx3REFBb0Q7QUFDcEQsOENBQTJDO0FBRTNDLE1BQWEsWUFBWTtJQUN2QixnQkFBZSxDQUFDO0lBRVQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFpQixFQUFFLE9BQWtCLEVBQUUsRUFBWTtRQUN0RSxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQWdCLEVBQUUsRUFBVztRQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUMsSUFBSSxFQUFFLEVBQUU7WUFDTixPQUFPLENBQUMsTUFBTTtpQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2lCQUNYLElBQUksQ0FBQyxDQUFDLEVBQVcsRUFBRSxFQUFFO2dCQUNwQixPQUFPLENBQUMsR0FBRyxDQUNULFlBQVksRUFBRSxDQUFDLEVBQUUsa0JBQWtCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQy9ELENBQUM7WUFDSixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLENBQUMsR0FBb0IsRUFBRSxFQUFFO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNOO2FBQU07WUFDTCxPQUFPO2lCQUNKLEtBQUssQ0FBQyxLQUFLLENBQUM7aUJBQ1osSUFBSSxDQUFDLENBQUMsRUFBVyxFQUFFLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsWUFBWSxFQUFFLENBQUMsRUFBRSxtQkFBbUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FDNUQsQ0FBQztZQUNKLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxHQUFvQixFQUFFLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLE9BQWdCO1FBQzVCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsTUFBTSxPQUFPLEdBQUcsZUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNoQyxNQUFNLE1BQU0sR0FBRyxlQUFNLENBQUMsY0FBYyxDQUFDO1lBQ3JDLE1BQU0sUUFBUSxHQUFHLGdDQUFjLENBQUMsUUFBUSxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxHQUFHLHNCQUFhLENBQUMsTUFBTSxDQUFDO1lBQ3BDLE1BQU0sSUFBSSxHQUFVLEVBQUUsQ0FBQztZQUN2QixRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUN6QixJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssS0FBSyxFQUFFO29CQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDO3dCQUNSLElBQUksRUFBRSxRQUFRLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxLQUFLO3dCQUN4QyxLQUFLLEVBQUUsSUFBSSxPQUFPLENBQUMsV0FBVyxHQUFHO3FCQUNsQyxDQUFDLENBQUM7aUJBQ0o7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sS0FBSyxHQUFHO2dCQUNaLEtBQUssRUFBRTtvQkFDTCxLQUFLLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSztvQkFDdkMsU0FBUyxFQUFFO3dCQUNULEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVM7cUJBQzNCO29CQUNELEtBQUssRUFBRSxNQUFNLE9BQU8saUJBQWlCO29CQUNyQyxXQUFXLEVBQUUsU0FDWCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUN0QiwrQkFBK0I7b0JBQy9CLE1BQU0sRUFBRSxJQUFJO29CQUNaLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtvQkFDckIsTUFBTSxFQUFFO3dCQUNOLFFBQVEsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVM7d0JBQy9CLElBQUksRUFBRSxLQUFLLE9BQU8sRUFBRTtxQkFDckI7aUJBQ0Y7YUFDRixDQUFDO1lBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdkVELG9DQXVFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1lc3NhZ2UsIERpc2NvcmRBUElFcnJvciB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgeyBJQ29tbWFuZEZ1bmN0aW9uIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvY29tbWFuZC5mdW5jdGlvbi5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IENsaWVudE1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vY29yZS9jbGllbnRcIjtcbmltcG9ydCB7IElDb21tYW5kIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvY29tbWFuZC5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IENvbW1hbmRNYW5hZ2VyIH0gZnJvbSBcIi4uL21hbmFnZXIuY29tbWFuZFwiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4uLy4uL2NvcmUvY29uZmlnXCI7XG5cbmV4cG9ydCBjbGFzcyBIZWxwRnVuY3Rpb24gaW1wbGVtZW50cyBJQ29tbWFuZEZ1bmN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIHB1YmxpYyBhc3luYyBFeGVjdXRlKG1lc3NhZ2U/OiBNZXNzYWdlLCBjb21tYW5kPzogSUNvbW1hbmQsIGRtPzogYm9vbGVhbikge1xuICAgIGF3YWl0IHRoaXMuU2hvd0hlbHAobWVzc2FnZSwgZG0pO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBTaG93SGVscChtZXNzYWdlOiBNZXNzYWdlLCBkbTogYm9vbGVhbikge1xuICAgIGNvbnN0IGVtYmVkID0gYXdhaXQgdGhpcy5FbWJlZChtZXNzYWdlKTtcbiAgICBwcm9jZXNzLm9uKFwidW5oYW5kbGVkUmVqZWN0aW9uXCIsIGNvbnNvbGUubG9nKTtcbiAgICBpZiAoZG0pIHtcbiAgICAgIG1lc3NhZ2UubWVtYmVyXG4gICAgICAgIC5zZW5kKGVtYmVkKVxuICAgICAgICAudGhlbigoJG06IE1lc3NhZ2UpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBNZXNzYWdlIDwkeyRtLmlkfT4gd2FzIHNlbnQgdG8gXCIke21lc3NhZ2UuYXV0aG9yLnVzZXJuYW1lfVwiLmBcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycjogRGlzY29yZEFQSUVycm9yKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coZXJyLm5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZVxuICAgICAgICAucmVwbHkoZW1iZWQpXG4gICAgICAgIC50aGVuKCgkbTogTWVzc2FnZSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYE1lc3NhZ2UgPCR7JG0uaWR9PiB3YXMgc2VudCBpbiBcIjwke21lc3NhZ2UuY2hhbm5lbC5pZH0+XCIuYFxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBEaXNjb3JkQVBJRXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgRW1iZWQobWVzc2FnZTogTWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBib3RuYW1lID0gQ29uZmlnLkJPVF9OQU1FO1xuICAgICAgY29uc3QgcHJlZml4ID0gQ29uZmlnLkNPTU1BTkRfUFJFRklYO1xuICAgICAgY29uc3QgY29tbWFuZHMgPSBDb21tYW5kTWFuYWdlci5Db21tYW5kcztcbiAgICAgIGNvbnN0IGNsaWVudCA9IENsaWVudE1hbmFnZXIuQ2xpZW50O1xuICAgICAgY29uc3QgbGlzdDogYW55W10gPSBbXTtcbiAgICAgIGNvbW1hbmRzLmZvckVhY2goY29tbWFuZCA9PiB7XG4gICAgICAgIGlmIChjb21tYW5kLkRldk9ubHkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IGBcXG4qKioke3ByZWZpeH0ke2NvbW1hbmQuTmFtZX0qKipgLFxuICAgICAgICAgICAgdmFsdWU6IGAqJHtjb21tYW5kLkRlc2NyaXB0aW9ufSpgXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgZW1iZWQgPSB7XG4gICAgICAgIGVtYmVkOiB7XG4gICAgICAgICAgY29sb3I6IG1lc3NhZ2UubWVtYmVyLmhpZ2hlc3RSb2xlLmNvbG9yLFxuICAgICAgICAgIHRodW1ibmFpbDoge1xuICAgICAgICAgICAgdXJsOiBjbGllbnQudXNlci5hdmF0YXJVUkxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRpdGxlOiBgKioqJHtib3RuYW1lfSBIZWxwIENlbnRlcioqKmAsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBIZXkgKioke1xuICAgICAgICAgICAgbWVzc2FnZS5tZW1iZXIudXNlci51c2VybmFtZVxuICAgICAgICAgIH0qKiEgVGhpcyBhcmUgbXkgY29tbWFuZCBsaXN0OmAsXG4gICAgICAgICAgZmllbGRzOiBsaXN0LFxuICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgICAgICAgICBmb290ZXI6IHtcbiAgICAgICAgICAgIGljb25fdXJsOiBjbGllbnQudXNlci5hdmF0YXJVUkwsXG4gICAgICAgICAgICB0ZXh0OiBgwqkgJHtib3RuYW1lfWBcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXNvbHZlKGVtYmVkKTtcbiAgICB9KTtcbiAgfVxufVxuIl19