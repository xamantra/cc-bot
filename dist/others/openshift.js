"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
class OpenShiftUptimer {
    static LogMessage(message) {
        if (OpenShiftUptimer.logger_enabled) {
            console.log(message);
        }
    }
    static AutoConfigure() {
        return new Promise((resolve, reject) => {
            OpenShiftUptimer.express_app = express();
            const ipaddress = process.env.OPENSHIFT_NODEJS_IP || "127.0.0.1";
            const port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
            OpenShiftUptimer.express_app.listen(port, ipaddress, () => {
                OpenShiftUptimer.LogMessage("[openshift_uptimer Express] Ready! IP=" +
                    ipaddress +
                    ", port=" +
                    port);
            });
            OpenShiftUptimer.SetUptimeRoute("/uptime_route");
            resolve(true);
        });
    }
    static GetExpress() {
        return OpenShiftUptimer.express_app;
    }
    static SetExpress(app) {
        OpenShiftUptimer.express_app = app;
    }
    static SetUptimeRoute(path) {
        OpenShiftUptimer.express_app.get(path, function (req, res) {
            res.send("Uptime OK!");
        });
    }
    static Log(status) {
        OpenShiftUptimer.logger_enabled = status;
    }
}
OpenShiftUptimer.logger_enabled = false;
exports.OpenShiftUptimer = OpenShiftUptimer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbnNoaWZ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL290aGVycy9vcGVuc2hpZnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxtQ0FBb0M7QUFFcEMsTUFBYSxnQkFBZ0I7SUFJbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFlO1FBQ3ZDLElBQUksZ0JBQWdCLENBQUMsY0FBYyxFQUFFO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLGFBQWE7UUFDekIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxnQkFBZ0IsQ0FBQyxXQUFXLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDekMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxXQUFXLENBQUM7WUFDakUsTUFBTSxJQUFJLEdBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUM7WUFDNUQsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDeEQsZ0JBQWdCLENBQUMsVUFBVSxDQUN6Qix3Q0FBd0M7b0JBQ3RDLFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxJQUFJLENBQ1AsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBQ0gsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxNQUFNLENBQUMsVUFBVTtRQUN2QixPQUFPLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztJQUN0QyxDQUFDO0lBRU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFRO1FBQ2hDLGdCQUFnQixDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7SUFDckMsQ0FBQztJQUVPLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBWTtRQUN4QyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFTLEdBQVEsRUFBRSxHQUFRO1lBQ2hFLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFlO1FBQy9CLGdCQUFnQixDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7SUFDM0MsQ0FBQzs7QUExQ2MsK0JBQWMsR0FBRyxLQUFLLENBQUM7QUFGeEMsNENBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzcyB9IGZyb20gXCJleHByZXNzXCI7XHJcbmltcG9ydCBleHByZXNzID0gcmVxdWlyZShcImV4cHJlc3NcIik7XHJcblxyXG5leHBvcnQgY2xhc3MgT3BlblNoaWZ0VXB0aW1lciB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgZXhwcmVzc19hcHA6IEV4cHJlc3M7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgbG9nZ2VyX2VuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgTG9nTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIGlmIChPcGVuU2hpZnRVcHRpbWVyLmxvZ2dlcl9lbmFibGVkKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBBdXRvQ29uZmlndXJlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgT3BlblNoaWZ0VXB0aW1lci5leHByZXNzX2FwcCA9IGV4cHJlc3MoKTtcclxuICAgICAgY29uc3QgaXBhZGRyZXNzID0gcHJvY2Vzcy5lbnYuT1BFTlNISUZUX05PREVKU19JUCB8fCBcIjEyNy4wLjAuMVwiO1xyXG4gICAgICBjb25zdCBwb3J0OiBhbnkgPSBwcm9jZXNzLmVudi5PUEVOU0hJRlRfTk9ERUpTX1BPUlQgfHwgODA4MDtcclxuICAgICAgT3BlblNoaWZ0VXB0aW1lci5leHByZXNzX2FwcC5saXN0ZW4ocG9ydCwgaXBhZGRyZXNzLCAoKSA9PiB7XHJcbiAgICAgICAgT3BlblNoaWZ0VXB0aW1lci5Mb2dNZXNzYWdlKFxyXG4gICAgICAgICAgXCJbb3BlbnNoaWZ0X3VwdGltZXIgRXhwcmVzc10gUmVhZHkhIElQPVwiICtcclxuICAgICAgICAgICAgaXBhZGRyZXNzICtcclxuICAgICAgICAgICAgXCIsIHBvcnQ9XCIgK1xyXG4gICAgICAgICAgICBwb3J0XHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICAgIE9wZW5TaGlmdFVwdGltZXIuU2V0VXB0aW1lUm91dGUoXCIvdXB0aW1lX3JvdXRlXCIpO1xyXG4gICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBHZXRFeHByZXNzKCkge1xyXG4gICAgcmV0dXJuIE9wZW5TaGlmdFVwdGltZXIuZXhwcmVzc19hcHA7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBTZXRFeHByZXNzKGFwcDogYW55KSB7XHJcbiAgICBPcGVuU2hpZnRVcHRpbWVyLmV4cHJlc3NfYXBwID0gYXBwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgU2V0VXB0aW1lUm91dGUocGF0aDogc3RyaW5nKSB7XHJcbiAgICBPcGVuU2hpZnRVcHRpbWVyLmV4cHJlc3NfYXBwLmdldChwYXRoLCBmdW5jdGlvbihyZXE6IGFueSwgcmVzOiBhbnkpIHtcclxuICAgICAgcmVzLnNlbmQoXCJVcHRpbWUgT0shXCIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIExvZyhzdGF0dXM6IGJvb2xlYW4pIHtcclxuICAgIE9wZW5TaGlmdFVwdGltZXIubG9nZ2VyX2VuYWJsZWQgPSBzdGF0dXM7XHJcbiAgfVxyXG59XHJcbiJdfQ==