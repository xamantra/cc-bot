"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const media_search_1 = require("./media.search");
const array_helper_1 = require("../helpers/array.helper");
const random_helper_1 = require("../helpers/random.helper");
class AnimeCache {
    static async Update(index = 0) {
        setTimeout(async () => {
            if (this.List.length > 0) {
                const local = this.List[index];
                const fromApi = await media_search_1.MediaSearch.Find(local.idMal);
                if (fromApi !== null && fromApi !== undefined) {
                    array_helper_1.ArrayHelper.remove(this.List, local, async () => {
                        const exists = await this.Exists(fromApi.idMal);
                        if (exists === false) {
                            this.List.push(fromApi);
                            this.Check(index);
                        }
                        else {
                            this.Check(index);
                        }
                    });
                }
                else {
                    this.Check(0);
                }
            }
            else {
                this.Check(0);
            }
        }, 3000);
    }
    static Check(index) {
        if (index === this.List.length - 1) {
            this.Update(0);
        }
        else {
            this.Update(index + 1);
        }
    }
    static Exists(id) {
        return new Promise((resolve, reject) => {
            const anime = this.List.find(x => x.idMal === id);
            if (anime !== null && anime !== undefined) {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    }
    static async Get(id) {
        return new Promise(async (resolve, reject) => {
            const local = this.List.find(x => x.idMal === id);
            if (local !== null && local !== undefined) {
                resolve(local);
            }
            else {
                const fromApi = await media_search_1.MediaSearch.Find(id);
                const exists = await this.Exists(fromApi.idMal);
                if (exists === false)
                    this.List.push(fromApi);
                resolve(fromApi);
            }
        });
    }
    static GetRandom() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                const anime = this.List[random_helper_1.Random.Range(0, this.List.length - 1)];
                if (anime !== null && anime !== undefined) {
                    resolve(anime);
                }
            }, 1);
        });
    }
    static async Search(keyword) {
        return new Promise(async (resolve, reject) => {
            const found = [];
            const length = this.List.length;
            if (length === 0) {
                const apiResult = await media_search_1.MediaSearch.All(keyword);
                if (apiResult.length === 0) {
                    resolve(found);
                }
                for (let x = 0; x < apiResult.length; x++) {
                    const fromApi = apiResult[x];
                    const exists = await this.Exists(fromApi.idMal);
                    if (exists === false)
                        this.List.push(fromApi);
                    if (x === apiResult.length - 1)
                        resolve(apiResult);
                }
            }
            for (let i = 0; i < length; i++) {
                const anime = this.List[i];
                const english = anime.title.english;
                const romaji = anime.title.romaji;
                let media = null;
                if (english !== null && english !== undefined) {
                    const match = await this.ScanMatch(keyword, english);
                    if (match === true) {
                        media = anime;
                    }
                }
                if (romaji !== null && romaji !== undefined) {
                    const match = await this.ScanMatch(keyword, romaji);
                    if (match === true) {
                        media = anime;
                    }
                }
                if (media !== null)
                    found.push(media);
                if (i === length - 1) {
                    if (found.length === 0) {
                        const apiResult = await media_search_1.MediaSearch.All(keyword);
                        if (apiResult.length === 0) {
                            resolve(found);
                        }
                        for (let x = 0; x < apiResult.length; x++) {
                            const fromApi = apiResult[x];
                            const exists = await this.Exists(fromApi.idMal);
                            if (exists === false)
                                this.List.push(fromApi);
                            if (x === apiResult.length - 1)
                                resolve(apiResult);
                        }
                    }
                    else {
                        resolve(found);
                    }
                }
            }
        });
    }
    static async ScanMatch(keyword, title) {
        return new Promise(async (resolve, reject) => {
            const match = await this.ScanTitle(keyword, title);
            if (match < 0) {
                resolve(false);
            }
            else {
                resolve(true);
            }
        });
    }
    static async ScanTitle(keyword, title) {
        return new Promise((resolve, reject) => {
            const keywords = keyword.split(/ +/g);
            let match = 0;
            for (let i = 0; i < keywords.length; i++) {
                const word = keywords[i];
                if (title.toLowerCase().includes(word)) {
                    match++;
                }
                if (i === keywords.length - 1) {
                    if (match === keywords.length)
                        resolve(match);
                    else
                        resolve(-1);
                }
            }
        });
    }
    static Log() {
        console.log(this.List);
    }
}
AnimeCache.List = [];
exports.AnimeCache = AnimeCache;
//# sourceMappingURL=data:application/json;base64,