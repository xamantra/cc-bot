"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_data_1 = require("./../../data/subscription.data");
const user_data_1 = require("../../data/user.data");
const media_list_handler_1 = require("../../handlers/media.list.handler");
const search_list_1 = require("../../core/search.list");
const title_helper_1 = require("../../helpers/title.helper");
const sender_1 = require("./../../core/sender");
const anime_cache_1 = require("../../core/anime.cache");
class UnsubFunction {
    async Execute(message, command, dm) {
        await this.Search(message, command, dm);
    }
    async Search(message, command, dm) {
        const title = command.Parameter;
        let media = [];
        const discordId = message.author.id;
        const userMedia = [];
        const filteredMedia = [];
        const formattedResults = [];
        const user = await user_data_1.UserData.GetUser(discordId);
        if (user === null) {
            sender_1.Sender.SendError(message, dm);
            return;
        }
        anime_cache_1.AnimeCache.Search(command.Parameter)
            .then(async (res) => {
            media = res;
            await subscription_data_1.SubscriptionData.All.forEach(async (sub) => {
                if (sub.UserId === user.Id) {
                    await userMedia.push(sub.MediaId);
                }
            });
            await media.forEach(async (m) => {
                if (userMedia.includes(m.idMal)) {
                    await filteredMedia.push(m);
                    await formattedResults.push(media_list_handler_1.MediaFormatHandler.Get(m));
                }
            });
            if (filteredMedia.length === 0) {
                sender_1.Sender.SendInfo(message, `Hmm..It seems that you are not subscribe to any anime that matches your keyword  ***${title}***.`, dm);
            }
            else if (filteredMedia.length === 1) {
                await subscription_data_1.SubscriptionData.Delete(filteredMedia[0].idMal, discordId);
                sender_1.Sender.SendInfo(message, `You are now unsubscribed from  ***${title_helper_1.TitleHelper.Get(filteredMedia[0].title)}***`, dm);
            }
            else {
                const embed = await search_list_1.SearchList.Embed(message, command, formattedResults);
                sender_1.Sender.SendInfo(message, embed, dm);
            }
        })
            .catch(() => {
            sender_1.Sender.Send(message, `Ge mo nasai! I didn't find anime that matches your keyword \`${command.Parameter}\``, dm);
            console.warn(`Error while searching : [MediaSearch.All(${command.Parameter})]`);
        });
    }
}
exports.UnsubFunction = UnsubFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zdWIuY29tbWFuZC5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kL2Z1bmN0aW9ucy91bnN1Yi5jb21tYW5kLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0VBQWtFO0FBSWxFLG9EQUFnRDtBQUNoRCwwRUFBdUU7QUFDdkUsd0RBQW9EO0FBQ3BELDZEQUF5RDtBQUN6RCxnREFBNkM7QUFFN0Msd0RBQW9EO0FBRXBELE1BQWEsYUFBYTtJQUNqQixLQUFLLENBQUMsT0FBTyxDQUNsQixPQUFpQixFQUNqQixPQUFrQixFQUNsQixFQUFZO1FBRVosTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBaUIsRUFBRSxPQUFrQixFQUFFLEVBQVk7UUFDdEUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNoQyxJQUFJLEtBQUssR0FBYSxFQUFFLENBQUM7UUFDekIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDcEMsTUFBTSxTQUFTLEdBQWEsRUFBRSxDQUFDO1FBQy9CLE1BQU0sYUFBYSxHQUFhLEVBQUUsQ0FBQztRQUNuQyxNQUFNLGdCQUFnQixHQUFVLEVBQUUsQ0FBQztRQUNuQyxNQUFNLElBQUksR0FBRyxNQUFNLG9CQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtZQUNqQixlQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM5QixPQUFPO1NBQ1I7UUFDRCx3QkFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2pDLElBQUksQ0FBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLEVBQUU7WUFDaEIsS0FBSyxHQUFHLEdBQUcsQ0FBQztZQUNaLE1BQU0sb0NBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLEVBQUU7Z0JBQzdDLElBQUksR0FBRyxDQUFDLE1BQU0sS0FBTSxJQUFhLENBQUMsRUFBRSxFQUFFO29CQUNwQyxNQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUNuQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsRUFBRTtnQkFDNUIsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDL0IsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM1QixNQUFNLGdCQUFnQixDQUFDLElBQUksQ0FBQyx1Q0FBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEQ7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzlCLGVBQU0sQ0FBQyxRQUFRLENBQ2IsT0FBTyxFQUNQLHVGQUF1RixLQUFLLE1BQU0sRUFDbEcsRUFBRSxDQUNILENBQUM7YUFDSDtpQkFBTSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNyQyxNQUFNLG9DQUFnQixDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNqRSxlQUFNLENBQUMsUUFBUSxDQUNiLE9BQU8sRUFDUCxxQ0FBcUMsMEJBQVcsQ0FBQyxHQUFHLENBQ2xELGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQ3ZCLEtBQUssRUFDTixFQUFFLENBQ0gsQ0FBQzthQUNIO2lCQUFNO2dCQUNMLE1BQU0sS0FBSyxHQUFHLE1BQU0sd0JBQVUsQ0FBQyxLQUFLLENBQ2xDLE9BQU8sRUFDUCxPQUFPLEVBQ1AsZ0JBQWdCLENBQ2pCLENBQUM7Z0JBQ0YsZUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxDQUFDO2FBQ0QsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNWLGVBQU0sQ0FBQyxJQUFJLENBQ1QsT0FBTyxFQUNQLGdFQUNFLE9BQU8sQ0FBQyxTQUNWLElBQUksRUFDSixFQUFFLENBQ0gsQ0FBQztZQUNGLE9BQU8sQ0FBQyxJQUFJLENBQ1YsNENBQTRDLE9BQU8sQ0FBQyxTQUFTLElBQUksQ0FDbEUsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNGO0FBeEVELHNDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21tYW5kRnVuY3Rpb24gfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb21tYW5kLmZ1bmN0aW9uLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uRGF0YSB9IGZyb20gXCIuLy4uLy4uL2RhdGEvc3Vic2NyaXB0aW9uLmRhdGFcIjtcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IHsgSUNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb21tYW5kLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSU1lZGlhIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvcGFnZS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFVzZXJEYXRhIH0gZnJvbSBcIi4uLy4uL2RhdGEvdXNlci5kYXRhXCI7XG5pbXBvcnQgeyBNZWRpYUZvcm1hdEhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vaGFuZGxlcnMvbWVkaWEubGlzdC5oYW5kbGVyXCI7XG5pbXBvcnQgeyBTZWFyY2hMaXN0IH0gZnJvbSBcIi4uLy4uL2NvcmUvc2VhcmNoLmxpc3RcIjtcbmltcG9ydCB7IFRpdGxlSGVscGVyIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvdGl0bGUuaGVscGVyXCI7XG5pbXBvcnQgeyBTZW5kZXIgfSBmcm9tIFwiLi8uLi8uLi9jb3JlL3NlbmRlclwiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi8uLi9tb2RlbHMvc3Vic2NyaXB0aW9uLm1vZGVsXCI7XG5pbXBvcnQgeyBBbmltZUNhY2hlIH0gZnJvbSBcIi4uLy4uL2NvcmUvYW5pbWUuY2FjaGVcIjtcblxuZXhwb3J0IGNsYXNzIFVuc3ViRnVuY3Rpb24gaW1wbGVtZW50cyBJQ29tbWFuZEZ1bmN0aW9uIHtcbiAgcHVibGljIGFzeW5jIEV4ZWN1dGUoXG4gICAgbWVzc2FnZT86IE1lc3NhZ2UsXG4gICAgY29tbWFuZD86IElDb21tYW5kLFxuICAgIGRtPzogYm9vbGVhblxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLlNlYXJjaChtZXNzYWdlLCBjb21tYW5kLCBkbSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIFNlYXJjaChtZXNzYWdlPzogTWVzc2FnZSwgY29tbWFuZD86IElDb21tYW5kLCBkbT86IGJvb2xlYW4pIHtcbiAgICBjb25zdCB0aXRsZSA9IGNvbW1hbmQuUGFyYW1ldGVyO1xuICAgIGxldCBtZWRpYTogSU1lZGlhW10gPSBbXTtcbiAgICBjb25zdCBkaXNjb3JkSWQgPSBtZXNzYWdlLmF1dGhvci5pZDtcbiAgICBjb25zdCB1c2VyTWVkaWE6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgZmlsdGVyZWRNZWRpYTogSU1lZGlhW10gPSBbXTtcbiAgICBjb25zdCBmb3JtYXR0ZWRSZXN1bHRzOiBhbnlbXSA9IFtdO1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyRGF0YS5HZXRVc2VyKGRpc2NvcmRJZCk7XG4gICAgaWYgKHVzZXIgPT09IG51bGwpIHtcbiAgICAgIFNlbmRlci5TZW5kRXJyb3IobWVzc2FnZSwgZG0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBBbmltZUNhY2hlLlNlYXJjaChjb21tYW5kLlBhcmFtZXRlcilcbiAgICAgIC50aGVuKGFzeW5jIHJlcyA9PiB7XG4gICAgICAgIG1lZGlhID0gcmVzO1xuICAgICAgICBhd2FpdCBTdWJzY3JpcHRpb25EYXRhLkFsbC5mb3JFYWNoKGFzeW5jIHN1YiA9PiB7XG4gICAgICAgICAgaWYgKHN1Yi5Vc2VySWQgPT09ICh1c2VyIGFzIFVzZXIpLklkKSB7XG4gICAgICAgICAgICBhd2FpdCB1c2VyTWVkaWEucHVzaChzdWIuTWVkaWFJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgbWVkaWEuZm9yRWFjaChhc3luYyBtID0+IHtcbiAgICAgICAgICBpZiAodXNlck1lZGlhLmluY2x1ZGVzKG0uaWRNYWwpKSB7XG4gICAgICAgICAgICBhd2FpdCBmaWx0ZXJlZE1lZGlhLnB1c2gobSk7XG4gICAgICAgICAgICBhd2FpdCBmb3JtYXR0ZWRSZXN1bHRzLnB1c2goTWVkaWFGb3JtYXRIYW5kbGVyLkdldChtKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZpbHRlcmVkTWVkaWEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgU2VuZGVyLlNlbmRJbmZvKFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGBIbW0uLkl0IHNlZW1zIHRoYXQgeW91IGFyZSBub3Qgc3Vic2NyaWJlIHRvIGFueSBhbmltZSB0aGF0IG1hdGNoZXMgeW91ciBrZXl3b3JkICAqKioke3RpdGxlfSoqKi5gLFxuICAgICAgICAgICAgZG1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlcmVkTWVkaWEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgYXdhaXQgU3Vic2NyaXB0aW9uRGF0YS5EZWxldGUoZmlsdGVyZWRNZWRpYVswXS5pZE1hbCwgZGlzY29yZElkKTtcbiAgICAgICAgICBTZW5kZXIuU2VuZEluZm8oXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgYFlvdSBhcmUgbm93IHVuc3Vic2NyaWJlZCBmcm9tICAqKioke1RpdGxlSGVscGVyLkdldChcbiAgICAgICAgICAgICAgZmlsdGVyZWRNZWRpYVswXS50aXRsZVxuICAgICAgICAgICAgKX0qKipgLFxuICAgICAgICAgICAgZG1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGVtYmVkID0gYXdhaXQgU2VhcmNoTGlzdC5FbWJlZChcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBjb21tYW5kLFxuICAgICAgICAgICAgZm9ybWF0dGVkUmVzdWx0c1xuICAgICAgICAgICk7XG4gICAgICAgICAgU2VuZGVyLlNlbmRJbmZvKG1lc3NhZ2UsIGVtYmVkLCBkbSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICBTZW5kZXIuU2VuZChcbiAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgIGBHZSBtbyBuYXNhaSEgSSBkaWRuJ3QgZmluZCBhbmltZSB0aGF0IG1hdGNoZXMgeW91ciBrZXl3b3JkIFxcYCR7XG4gICAgICAgICAgICBjb21tYW5kLlBhcmFtZXRlclxuICAgICAgICAgIH1cXGBgLFxuICAgICAgICAgIGRtXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgRXJyb3Igd2hpbGUgc2VhcmNoaW5nIDogW01lZGlhU2VhcmNoLkFsbCgke2NvbW1hbmQuUGFyYW1ldGVyfSldYFxuICAgICAgICApO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==