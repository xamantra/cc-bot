"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("../../core/client");
const manager_command_1 = require("../manager.command");
const config_1 = require("../../core/config");
class HelpFunction {
    constructor() { }
    async Execute(message, command, dm) {
        await this.ShowHelp(message, dm);
    }
    async ShowHelp(message, dm) {
        const embed = await this.Embed(message);
        process.on("unhandledRejection", console.log);
        if (dm) {
            message.member
                .send(embed)
                .then(($m) => {
                console.log(`Message <${$m.id}> was sent to "${message.author.username}".`);
            })
                .catch((err) => {
                console.log(err.name);
            });
        }
        else {
            message
                .reply(embed)
                .then(($m) => {
                console.log(`Message <${$m.id}> was sent in "<${message.channel.id}>".`);
            })
                .catch((err) => {
                console.log(err.name);
            });
        }
    }
    Embed(message) {
        return new Promise((resolve, reject) => {
            const botname = config_1.Config.BOT_NAME;
            const prefix = config_1.Config.COMMAND_PREFIX;
            const commands = manager_command_1.CommandManager.Commands;
            client_1.ClientManager.GetClient().then(client => {
                const list = [];
                commands.forEach(command => {
                    if (command.DevOnly === false) {
                        list.push({
                            name: `\n***${prefix}${command.Name}***`,
                            value: `*${command.Description}*`
                        });
                    }
                });
                const embed = {
                    embed: {
                        color: message.member.highestRole.color,
                        thumbnail: {
                            url: client.user.avatarURL
                        },
                        title: `***${botname} Help Center***`,
                        description: `Hey **${message.member.user.username}**! This are my command list:`,
                        fields: list,
                        timestamp: new Date(),
                        footer: {
                            icon_url: client.user.avatarURL,
                            text: `Â© ${botname}`
                        }
                    }
                };
                resolve(embed);
            });
        });
    }
}
exports.HelpFunction = HelpFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC5jb21tYW5kLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmQvZnVuY3Rpb25zL2hlbHAuY29tbWFuZC5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLDhDQUFrRDtBQUVsRCx3REFBb0Q7QUFDcEQsOENBQTJDO0FBRTNDLE1BQWEsWUFBWTtJQUN2QixnQkFBZSxDQUFDO0lBRVQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFpQixFQUFFLE9BQWtCLEVBQUUsRUFBWTtRQUN0RSxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQWdCLEVBQUUsRUFBVztRQUNsRCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUMsSUFBSSxFQUFFLEVBQUU7WUFDTixPQUFPLENBQUMsTUFBTTtpQkFDWCxJQUFJLENBQUMsS0FBSyxDQUFDO2lCQUNYLElBQUksQ0FBQyxDQUFDLEVBQVcsRUFBRSxFQUFFO2dCQUNwQixPQUFPLENBQUMsR0FBRyxDQUNULFlBQVksRUFBRSxDQUFDLEVBQUUsa0JBQWtCLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxJQUFJLENBQy9ELENBQUM7WUFDSixDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLENBQUMsR0FBb0IsRUFBRSxFQUFFO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QixDQUFDLENBQUMsQ0FBQztTQUNOO2FBQU07WUFDTCxPQUFPO2lCQUNKLEtBQUssQ0FBQyxLQUFLLENBQUM7aUJBQ1osSUFBSSxDQUFDLENBQUMsRUFBVyxFQUFFLEVBQUU7Z0JBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQ1QsWUFBWSxFQUFFLENBQUMsRUFBRSxtQkFBbUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FDNUQsQ0FBQztZQUNKLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxHQUFvQixFQUFFLEVBQUU7Z0JBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLE9BQWdCO1FBQzVCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsTUFBTSxPQUFPLEdBQUcsZUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNoQyxNQUFNLE1BQU0sR0FBRyxlQUFNLENBQUMsY0FBYyxDQUFDO1lBQ3JDLE1BQU0sUUFBUSxHQUFHLGdDQUFjLENBQUMsUUFBUSxDQUFDO1lBQ3pDLHNCQUFhLENBQUMsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN0QyxNQUFNLElBQUksR0FBVSxFQUFFLENBQUM7Z0JBQ3ZCLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ3pCLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7d0JBQzdCLElBQUksQ0FBQyxJQUFJLENBQUM7NEJBQ1IsSUFBSSxFQUFFLFFBQVEsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEtBQUs7NEJBQ3hDLEtBQUssRUFBRSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEdBQUc7eUJBQ2xDLENBQUMsQ0FBQztxQkFDSjtnQkFDSCxDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNLEtBQUssR0FBRztvQkFDWixLQUFLLEVBQUU7d0JBQ0wsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEtBQUs7d0JBQ3ZDLFNBQVMsRUFBRTs0QkFDVCxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTO3lCQUMzQjt3QkFDRCxLQUFLLEVBQUUsTUFBTSxPQUFPLGlCQUFpQjt3QkFDckMsV0FBVyxFQUFFLFNBQ1gsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFDdEIsK0JBQStCO3dCQUMvQixNQUFNLEVBQUUsSUFBSTt3QkFDWixTQUFTLEVBQUUsSUFBSSxJQUFJLEVBQUU7d0JBQ3JCLE1BQU0sRUFBRTs0QkFDTixRQUFRLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTOzRCQUMvQixJQUFJLEVBQUUsS0FBSyxPQUFPLEVBQUU7eUJBQ3JCO3FCQUNGO2lCQUNGLENBQUM7Z0JBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF4RUQsb0NBd0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVzc2FnZSwgRGlzY29yZEFQSUVycm9yIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcbmltcG9ydCB7IElDb21tYW5kRnVuY3Rpb24gfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb21tYW5kLmZ1bmN0aW9uLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgQ2xpZW50TWFuYWdlciB9IGZyb20gXCIuLi8uLi9jb3JlL2NsaWVudFwiO1xuaW1wb3J0IHsgSUNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb21tYW5kLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgQ29tbWFuZE1hbmFnZXIgfSBmcm9tIFwiLi4vbWFuYWdlci5jb21tYW5kXCI7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tIFwiLi4vLi4vY29yZS9jb25maWdcIjtcblxuZXhwb3J0IGNsYXNzIEhlbHBGdW5jdGlvbiBpbXBsZW1lbnRzIElDb21tYW5kRnVuY3Rpb24ge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHVibGljIGFzeW5jIEV4ZWN1dGUobWVzc2FnZT86IE1lc3NhZ2UsIGNvbW1hbmQ/OiBJQ29tbWFuZCwgZG0/OiBib29sZWFuKSB7XG4gICAgYXdhaXQgdGhpcy5TaG93SGVscChtZXNzYWdlLCBkbSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIFNob3dIZWxwKG1lc3NhZ2U6IE1lc3NhZ2UsIGRtOiBib29sZWFuKSB7XG4gICAgY29uc3QgZW1iZWQgPSBhd2FpdCB0aGlzLkVtYmVkKG1lc3NhZ2UpO1xuICAgIHByb2Nlc3Mub24oXCJ1bmhhbmRsZWRSZWplY3Rpb25cIiwgY29uc29sZS5sb2cpO1xuICAgIGlmIChkbSkge1xuICAgICAgbWVzc2FnZS5tZW1iZXJcbiAgICAgICAgLnNlbmQoZW1iZWQpXG4gICAgICAgIC50aGVuKCgkbTogTWVzc2FnZSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYE1lc3NhZ2UgPCR7JG0uaWR9PiB3YXMgc2VudCB0byBcIiR7bWVzc2FnZS5hdXRob3IudXNlcm5hbWV9XCIuYFxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBEaXNjb3JkQVBJRXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIubmFtZSk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlXG4gICAgICAgIC5yZXBseShlbWJlZClcbiAgICAgICAgLnRoZW4oKCRtOiBNZXNzYWdlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICBgTWVzc2FnZSA8JHskbS5pZH0+IHdhcyBzZW50IGluIFwiPCR7bWVzc2FnZS5jaGFubmVsLmlkfT5cIi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnI6IERpc2NvcmRBUElFcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGVyci5uYW1lKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBFbWJlZChtZXNzYWdlOiBNZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGJvdG5hbWUgPSBDb25maWcuQk9UX05BTUU7XG4gICAgICBjb25zdCBwcmVmaXggPSBDb25maWcuQ09NTUFORF9QUkVGSVg7XG4gICAgICBjb25zdCBjb21tYW5kcyA9IENvbW1hbmRNYW5hZ2VyLkNvbW1hbmRzO1xuICAgICAgQ2xpZW50TWFuYWdlci5HZXRDbGllbnQoKS50aGVuKGNsaWVudCA9PiB7XG4gICAgICAgIGNvbnN0IGxpc3Q6IGFueVtdID0gW107XG4gICAgICAgIGNvbW1hbmRzLmZvckVhY2goY29tbWFuZCA9PiB7XG4gICAgICAgICAgaWYgKGNvbW1hbmQuRGV2T25seSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaCh7XG4gICAgICAgICAgICAgIG5hbWU6IGBcXG4qKioke3ByZWZpeH0ke2NvbW1hbmQuTmFtZX0qKipgLFxuICAgICAgICAgICAgICB2YWx1ZTogYCoke2NvbW1hbmQuRGVzY3JpcHRpb259KmBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVtYmVkID0ge1xuICAgICAgICAgIGVtYmVkOiB7XG4gICAgICAgICAgICBjb2xvcjogbWVzc2FnZS5tZW1iZXIuaGlnaGVzdFJvbGUuY29sb3IsXG4gICAgICAgICAgICB0aHVtYm5haWw6IHtcbiAgICAgICAgICAgICAgdXJsOiBjbGllbnQudXNlci5hdmF0YXJVUkxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aXRsZTogYCoqKiR7Ym90bmFtZX0gSGVscCBDZW50ZXIqKipgLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGBIZXkgKioke1xuICAgICAgICAgICAgICBtZXNzYWdlLm1lbWJlci51c2VyLnVzZXJuYW1lXG4gICAgICAgICAgICB9KiohIFRoaXMgYXJlIG15IGNvbW1hbmQgbGlzdDpgLFxuICAgICAgICAgICAgZmllbGRzOiBsaXN0LFxuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgZm9vdGVyOiB7XG4gICAgICAgICAgICAgIGljb25fdXJsOiBjbGllbnQudXNlci5hdmF0YXJVUkwsXG4gICAgICAgICAgICAgIHRleHQ6IGDCqSAke2JvdG5hbWV9YFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmVzb2x2ZShlbWJlZCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19