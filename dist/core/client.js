"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const dblapi_js_1 = __importDefault(require("dblapi.js"));
class ClientManager {
    static async Init(client) {
        const dbl = new dblapi_js_1.default(config_1.Config.DBL_TOKEN);
        this.Client = client;
        client.on("guildCreate", guild => {
            console.log(`New server joined: ${guild.name} (Id: ${guild.id}). This server has ${guild.memberCount} members!`);
        });
        client.on("ready", () => {
            console.log(`Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} servers.`);
            dbl.postStats(client.guilds.size);
            setInterval(() => {
                dbl.postStats(client.guilds.size);
            }, 1800000);
        });
        await client.login(config_1.Config.BOT_TOKEN);
    }
    static GetClient() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Client !== null && this.Client !== undefined) {
                    resolve(this.Client);
                }
            }, 100);
        });
    }
    static GetUser(discordId) {
        return new Promise(async (resolve, reject) => {
            const client = await this.GetClient();
            setInterval(() => {
                const user = client.users.get(discordId);
                if (user !== null && user !== undefined) {
                    resolve(user);
                }
            }, 1);
            setTimeout(() => {
                resolve(null);
            }, 10000);
        });
    }
}
exports.ClientManager = ClientManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EscUNBQWtDO0FBQ2xDLDBEQUE0QjtBQUU1QixNQUFhLGFBQWE7SUFHakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBYztRQUNyQyxNQUFNLEdBQUcsR0FBRyxJQUFJLG1CQUFHLENBQUMsZUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQ1Qsc0JBQXNCLEtBQUssQ0FBQyxJQUFJLFNBQVMsS0FBSyxDQUFDLEVBQUUsc0JBQy9DLEtBQUssQ0FBQyxXQUNSLFdBQVcsQ0FDWixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FDVCx5QkFBeUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLGNBQ3hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFDbEIsZ0JBQWdCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQzlDLENBQUM7WUFDRixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsV0FBVyxDQUFDLEdBQUcsRUFBRTtnQkFDZixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2QsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLE1BQU0sQ0FBQyxLQUFLLENBQUMsZUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxNQUFNLENBQUMsU0FBUztRQUNyQixPQUFPLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzdDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtvQkFDckQsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDdEI7WUFDSCxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDVixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWlCO1FBQ3JDLE9BQU8sSUFBSSxPQUFPLENBQU8sS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNqRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN0QyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN6QyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtvQkFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNmO1lBQ0gsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ04sVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDaEIsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFwREQsc0NBb0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50LCBVc2VyIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IERCTCBmcm9tIFwiZGJsYXBpLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGllbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgQ2xpZW50OiBDbGllbnQ7XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBJbml0KGNsaWVudDogQ2xpZW50KSB7XG4gICAgY29uc3QgZGJsID0gbmV3IERCTChDb25maWcuREJMX1RPS0VOKTtcbiAgICB0aGlzLkNsaWVudCA9IGNsaWVudDtcbiAgICBjbGllbnQub24oXCJndWlsZENyZWF0ZVwiLCBndWlsZCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYE5ldyBzZXJ2ZXIgam9pbmVkOiAke2d1aWxkLm5hbWV9IChJZDogJHtndWlsZC5pZH0pLiBUaGlzIHNlcnZlciBoYXMgJHtcbiAgICAgICAgICBndWlsZC5tZW1iZXJDb3VudFxuICAgICAgICB9IG1lbWJlcnMhYFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGNsaWVudC5vbihcInJlYWR5XCIsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgQm90IGhhcyBzdGFydGVkLCB3aXRoICR7Y2xpZW50LnVzZXJzLnNpemV9IHVzZXJzLCBpbiAke1xuICAgICAgICAgIGNsaWVudC5jaGFubmVscy5zaXplXG4gICAgICAgIH0gY2hhbm5lbHMgb2YgJHtjbGllbnQuZ3VpbGRzLnNpemV9IHNlcnZlcnMuYFxuICAgICAgKTtcbiAgICAgIGRibC5wb3N0U3RhdHMoY2xpZW50Lmd1aWxkcy5zaXplKTtcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgZGJsLnBvc3RTdGF0cyhjbGllbnQuZ3VpbGRzLnNpemUpO1xuICAgICAgfSwgMTgwMDAwMCk7XG4gICAgfSk7XG4gICAgYXdhaXQgY2xpZW50LmxvZ2luKENvbmZpZy5CT1RfVE9LRU4pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRDbGllbnQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPENsaWVudD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5DbGllbnQgIT09IG51bGwgJiYgdGhpcy5DbGllbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodGhpcy5DbGllbnQpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBHZXRVc2VyKGRpc2NvcmRJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFVzZXI+KGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IHRoaXMuR2V0Q2xpZW50KCk7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBjbGllbnQudXNlcnMuZ2V0KGRpc2NvcmRJZCk7XG4gICAgICAgIGlmICh1c2VyICE9PSBudWxsICYmIHVzZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodXNlcik7XG4gICAgICAgIH1cbiAgICAgIH0sIDEpO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICB9LCAxMDAwMCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==