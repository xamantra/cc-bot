"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
class ClientManager {
    static async Init(client) {
        await client.login(config_1.Config.BOT_TOKEN);
        this.Client = client;
        client.on("guildCreate", guild => {
            console.log(`New server joined: ${guild.name} (Id: ${guild.id}). This server has ${guild.memberCount} members!`);
        });
        client.on("ready", () => {
            client.guilds.forEach(guild => {
                if (guild.id !== "501781353499721739") {
                    guild.leave();
                }
            });
            console.log(`Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} servers.`);
        });
    }
    static GetClient() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Client !== null && this.Client !== undefined) {
                    resolve(this.Client);
                }
            }, 100);
        });
    }
    static GetUser(discordId) {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                const user = this.Client.users.get(discordId);
                if (user !== null && user !== undefined) {
                    resolve(user);
                }
            }, 0);
            setTimeout(() => {
                reject(new Error(`Unable to get user <${discordId}>.`));
            }, 10000);
        });
    }
}
exports.ClientManager = ClientManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQWtDO0FBR2xDLE1BQWEsYUFBYTtJQUdqQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFjO1FBQ3JDLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCxzQkFBc0IsS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRSxzQkFDL0MsS0FBSyxDQUFDLFdBQ1IsV0FBVyxDQUNaLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUN0QixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDNUIsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLG9CQUFvQixFQUFFO29CQUNyQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQ2Y7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sQ0FBQyxHQUFHLENBQ1QseUJBQXlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxjQUN4QyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQ2xCLGdCQUFnQixNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksV0FBVyxDQUM5QyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLFNBQVM7UUFDckIsT0FBTyxJQUFJLE9BQU8sQ0FBUyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUM3QyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUNmLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7b0JBQ3JELE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3RCO1lBQ0gsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFpQjtRQUNyQyxPQUFPLElBQUksT0FBTyxDQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQzNDLFdBQVcsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUM5QyxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtvQkFDdkMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNmO1lBQ0gsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ04sVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsdUJBQXVCLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMxRCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQW5ERCxzQ0FtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnQsIFVzZXIsIENvbGxlY3Rpb24gfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBCb3RQcmVzZW5jZSB9IGZyb20gXCIuL3ByZXNlbmNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDbGllbnRNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBzdGF0aWMgQ2xpZW50OiBDbGllbnQ7XG5cbiAgcHVibGljIHN0YXRpYyBhc3luYyBJbml0KGNsaWVudDogQ2xpZW50KSB7XG4gICAgYXdhaXQgY2xpZW50LmxvZ2luKENvbmZpZy5CT1RfVE9LRU4pO1xuICAgIHRoaXMuQ2xpZW50ID0gY2xpZW50O1xuICAgIGNsaWVudC5vbihcImd1aWxkQ3JlYXRlXCIsIGd1aWxkID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgTmV3IHNlcnZlciBqb2luZWQ6ICR7Z3VpbGQubmFtZX0gKElkOiAke2d1aWxkLmlkfSkuIFRoaXMgc2VydmVyIGhhcyAke1xuICAgICAgICAgIGd1aWxkLm1lbWJlckNvdW50XG4gICAgICAgIH0gbWVtYmVycyFgXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgY2xpZW50Lm9uKFwicmVhZHlcIiwgKCkgPT4ge1xuICAgICAgY2xpZW50Lmd1aWxkcy5mb3JFYWNoKGd1aWxkID0+IHtcbiAgICAgICAgaWYgKGd1aWxkLmlkICE9PSBcIjUwMTc4MTM1MzQ5OTcyMTczOVwiKSB7XG4gICAgICAgICAgZ3VpbGQubGVhdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYEJvdCBoYXMgc3RhcnRlZCwgd2l0aCAke2NsaWVudC51c2Vycy5zaXplfSB1c2VycywgaW4gJHtcbiAgICAgICAgICBjbGllbnQuY2hhbm5lbHMuc2l6ZVxuICAgICAgICB9IGNoYW5uZWxzIG9mICR7Y2xpZW50Lmd1aWxkcy5zaXplfSBzZXJ2ZXJzLmBcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEdldENsaWVudCgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8Q2xpZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLkNsaWVudCAhPT0gbnVsbCAmJiB0aGlzLkNsaWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzb2x2ZSh0aGlzLkNsaWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEdldFVzZXIoZGlzY29yZElkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8VXNlcj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjb25zdCB1c2VyID0gdGhpcy5DbGllbnQudXNlcnMuZ2V0KGRpc2NvcmRJZCk7XG4gICAgICAgIGlmICh1c2VyICE9PSBudWxsICYmIHVzZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlc29sdmUodXNlcik7XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFVuYWJsZSB0byBnZXQgdXNlciA8JHtkaXNjb3JkSWR9Pi5gKSk7XG4gICAgICB9LCAxMDAwMCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==