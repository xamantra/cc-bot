"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Sender {
    static Send(message, content, isDM = false, callback) {
        if (isDM) {
            message.author
                .send(content)
                .then(($m) => {
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Message <${$m.id}> was sent to "${message.author.username}".`);
            })
                .catch((err) => {
                message.reply(`Oh!, it seems that I can't dm you.`);
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Sender.ts: "${err.message}"`);
            });
        }
        else {
            message
                .reply(content)
                .then(($m) => {
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Message <${$m.id}> was sent in <${message.channel.id}>.`);
            })
                .catch((err) => {
                if (callback !== null && callback !== undefined) {
                    callback();
                }
                console.log(`Sender.ts: "${err.message}"`);
            });
        }
    }
    static SendInfo(message, content, isDM = false) {
        this.Send(message, content, isDM);
    }
    static SendError(message, isDM = false) {
        this.Send(message, `:x: Oops, there was some error, please try again later.`, isDM);
    }
}
exports.Sender = Sender;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvc2VuZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsTUFBYSxNQUFNO0lBQ1YsTUFBTSxDQUFDLElBQUksQ0FDaEIsT0FBZ0IsRUFDaEIsT0FBWSxFQUNaLE9BQWdCLEtBQUssRUFDckIsUUFBcUI7UUFFckIsSUFBSSxJQUFJLEVBQUU7WUFDUixPQUFPLENBQUMsTUFBTTtpQkFDWCxJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUNiLElBQUksQ0FBQyxDQUFDLEVBQVcsRUFBRSxFQUFFO2dCQUNwQixJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtvQkFDL0MsUUFBUSxFQUFFLENBQUM7aUJBQ1o7Z0JBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FDVCxZQUFZLEVBQUUsQ0FBQyxFQUFFLGtCQUFrQixPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUMvRCxDQUFDO1lBQ0osQ0FBQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxDQUFDLEdBQW9CLEVBQUUsRUFBRTtnQkFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLFFBQVEsS0FBSyxJQUFJLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtvQkFDL0MsUUFBUSxFQUFFLENBQUM7aUJBQ1o7Z0JBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1lBQzdDLENBQUMsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNMLE9BQU87aUJBQ0osS0FBSyxDQUFDLE9BQU8sQ0FBQztpQkFDZCxJQUFJLENBQUMsQ0FBQyxFQUFXLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7b0JBQy9DLFFBQVEsRUFBRSxDQUFDO2lCQUNaO2dCQUNELE9BQU8sQ0FBQyxHQUFHLENBQ1QsWUFBWSxFQUFFLENBQUMsRUFBRSxrQkFBa0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FDMUQsQ0FBQztZQUNKLENBQUMsQ0FBQztpQkFDRCxLQUFLLENBQUMsQ0FBQyxHQUFvQixFQUFFLEVBQUU7Z0JBQzlCLElBQUksUUFBUSxLQUFLLElBQUksSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO29CQUMvQyxRQUFRLEVBQUUsQ0FBQztpQkFDWjtnQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNILENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUNwQixPQUFnQixFQUNoQixPQUFZLEVBQ1osT0FBZ0IsS0FBSztRQUVyQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBZ0IsRUFBRSxPQUFnQixLQUFLO1FBQzdELElBQUksQ0FBQyxJQUFJLENBQ1AsT0FBTyxFQUNQLHlEQUF5RCxFQUN6RCxJQUFJLENBQ0wsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTVERCx3QkE0REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXNzYWdlLCBEaXNjb3JkQVBJRXJyb3IgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgU2VuZGVyIHtcbiAgcHVibGljIHN0YXRpYyBTZW5kKFxuICAgIG1lc3NhZ2U6IE1lc3NhZ2UsXG4gICAgY29udGVudDogYW55LFxuICAgIGlzRE06IGJvb2xlYW4gPSBmYWxzZSxcbiAgICBjYWxsYmFjaz86ICgpID0+IHZvaWRcbiAgKSB7XG4gICAgaWYgKGlzRE0pIHtcbiAgICAgIG1lc3NhZ2UuYXV0aG9yXG4gICAgICAgIC5zZW5kKGNvbnRlbnQpXG4gICAgICAgIC50aGVuKCgkbTogTWVzc2FnZSkgPT4ge1xuICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBNZXNzYWdlIDwkeyRtLmlkfT4gd2FzIHNlbnQgdG8gXCIke21lc3NhZ2UuYXV0aG9yLnVzZXJuYW1lfVwiLmBcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycjogRGlzY29yZEFQSUVycm9yKSA9PiB7XG4gICAgICAgICAgbWVzc2FnZS5yZXBseShgT2ghLCBpdCBzZWVtcyB0aGF0IEkgY2FuJ3QgZG0geW91LmApO1xuICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmxvZyhgU2VuZGVyLnRzOiBcIiR7ZXJyLm1lc3NhZ2V9XCJgKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2VcbiAgICAgICAgLnJlcGx5KGNvbnRlbnQpXG4gICAgICAgIC50aGVuKCgkbTogTWVzc2FnZSkgPT4ge1xuICAgICAgICAgIGlmIChjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgIGBNZXNzYWdlIDwkeyRtLmlkfT4gd2FzIHNlbnQgaW4gPCR7bWVzc2FnZS5jaGFubmVsLmlkfT4uYFxuICAgICAgICAgICk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyOiBEaXNjb3JkQVBJRXJyb3IpID0+IHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwgJiYgY2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc29sZS5sb2coYFNlbmRlci50czogXCIke2Vyci5tZXNzYWdlfVwiYCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgU2VuZEluZm8oXG4gICAgbWVzc2FnZTogTWVzc2FnZSxcbiAgICBjb250ZW50OiBhbnksXG4gICAgaXNETTogYm9vbGVhbiA9IGZhbHNlXG4gICkge1xuICAgIHRoaXMuU2VuZChtZXNzYWdlLCBjb250ZW50LCBpc0RNKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgU2VuZEVycm9yKG1lc3NhZ2U6IE1lc3NhZ2UsIGlzRE06IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuU2VuZChcbiAgICAgIG1lc3NhZ2UsXG4gICAgICBgOng6IE9vcHMsIHRoZXJlIHdhcyBzb21lIGVycm9yLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLmAsXG4gICAgICBpc0RNXG4gICAgKTtcbiAgfVxufVxuIl19