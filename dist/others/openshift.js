"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
class OpenShiftUptimer {
    static LogMessage(message) {
        if (OpenShiftUptimer.logger_enabled) {
            console.log(message);
        }
    }
    static AutoConfigure() {
        return new Promise((resolve, reject) => {
            OpenShiftUptimer.express_app = express();
            const ipaddress = process.env.OPENSHIFT_NODEJS_IP || "127.0.0.1";
            const port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
            OpenShiftUptimer.express_app.listen(port, ipaddress, () => {
                OpenShiftUptimer.LogMessage("[openshift_uptimer Express] Ready! IP=" +
                    ipaddress +
                    ", port=" +
                    port);
            });
            OpenShiftUptimer.SetUptimeRoute("/uptime_route");
            resolve(true);
        });
    }
    static GetExpress() {
        return OpenShiftUptimer.express_app;
    }
    static SetExpress(app) {
        OpenShiftUptimer.express_app = app;
    }
    static SetUptimeRoute(path) {
        OpenShiftUptimer.express_app.get(path, function (req, res) {
            res.send("Uptime OK!");
        });
    }
    static Log(status) {
        OpenShiftUptimer.logger_enabled = status;
    }
}
OpenShiftUptimer.logger_enabled = false;
exports.OpenShiftUptimer = OpenShiftUptimer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlbnNoaWZ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL290aGVycy9vcGVuc2hpZnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxtQ0FBb0M7QUFFcEMsTUFBYSxnQkFBZ0I7SUFJbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFlO1FBQ3ZDLElBQUksZ0JBQWdCLENBQUMsY0FBYyxFQUFFO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRU0sTUFBTSxDQUFDLGFBQWE7UUFDekIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxnQkFBZ0IsQ0FBQyxXQUFXLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDekMsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxXQUFXLENBQUM7WUFDakUsTUFBTSxJQUFJLEdBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUM7WUFDNUQsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRTtnQkFDeEQsZ0JBQWdCLENBQUMsVUFBVSxDQUN6Qix3Q0FBd0M7b0JBQ3RDLFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxJQUFJLENBQ1AsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBQ0gsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxNQUFNLENBQUMsVUFBVTtRQUN2QixPQUFPLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztJQUN0QyxDQUFDO0lBRU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFRO1FBQ2hDLGdCQUFnQixDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7SUFDckMsQ0FBQztJQUVPLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBWTtRQUN4QyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxVQUFTLEdBQVEsRUFBRSxHQUFRO1lBQ2hFLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFlO1FBQy9CLGdCQUFnQixDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUM7SUFDM0MsQ0FBQzs7QUExQ2MsK0JBQWMsR0FBRyxLQUFLLENBQUM7QUFGeEMsNENBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzcyB9IGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgZXhwcmVzcyA9IHJlcXVpcmUoXCJleHByZXNzXCIpO1xuXG5leHBvcnQgY2xhc3MgT3BlblNoaWZ0VXB0aW1lciB7XG4gIHByaXZhdGUgc3RhdGljIGV4cHJlc3NfYXBwOiBFeHByZXNzO1xuICBwcml2YXRlIHN0YXRpYyBsb2dnZXJfZW5hYmxlZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgc3RhdGljIExvZ01lc3NhZ2UobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgaWYgKE9wZW5TaGlmdFVwdGltZXIubG9nZ2VyX2VuYWJsZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgQXV0b0NvbmZpZ3VyZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgT3BlblNoaWZ0VXB0aW1lci5leHByZXNzX2FwcCA9IGV4cHJlc3MoKTtcbiAgICAgIGNvbnN0IGlwYWRkcmVzcyA9IHByb2Nlc3MuZW52Lk9QRU5TSElGVF9OT0RFSlNfSVAgfHwgXCIxMjcuMC4wLjFcIjtcbiAgICAgIGNvbnN0IHBvcnQ6IGFueSA9IHByb2Nlc3MuZW52Lk9QRU5TSElGVF9OT0RFSlNfUE9SVCB8fCA4MDgwO1xuICAgICAgT3BlblNoaWZ0VXB0aW1lci5leHByZXNzX2FwcC5saXN0ZW4ocG9ydCwgaXBhZGRyZXNzLCAoKSA9PiB7XG4gICAgICAgIE9wZW5TaGlmdFVwdGltZXIuTG9nTWVzc2FnZShcbiAgICAgICAgICBcIltvcGVuc2hpZnRfdXB0aW1lciBFeHByZXNzXSBSZWFkeSEgSVA9XCIgK1xuICAgICAgICAgICAgaXBhZGRyZXNzICtcbiAgICAgICAgICAgIFwiLCBwb3J0PVwiICtcbiAgICAgICAgICAgIHBvcnRcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgICAgT3BlblNoaWZ0VXB0aW1lci5TZXRVcHRpbWVSb3V0ZShcIi91cHRpbWVfcm91dGVcIik7XG4gICAgICByZXNvbHZlKHRydWUpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgR2V0RXhwcmVzcygpIHtcbiAgICByZXR1cm4gT3BlblNoaWZ0VXB0aW1lci5leHByZXNzX2FwcDtcbiAgfVxuXG4gIHByaXZhdGUgc3RhdGljIFNldEV4cHJlc3MoYXBwOiBhbnkpIHtcbiAgICBPcGVuU2hpZnRVcHRpbWVyLmV4cHJlc3NfYXBwID0gYXBwO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgU2V0VXB0aW1lUm91dGUocGF0aDogc3RyaW5nKSB7XG4gICAgT3BlblNoaWZ0VXB0aW1lci5leHByZXNzX2FwcC5nZXQocGF0aCwgZnVuY3Rpb24ocmVxOiBhbnksIHJlczogYW55KSB7XG4gICAgICByZXMuc2VuZChcIlVwdGltZSBPSyFcIik7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIExvZyhzdGF0dXM6IGJvb2xlYW4pIHtcbiAgICBPcGVuU2hpZnRVcHRpbWVyLmxvZ2dlcl9lbmFibGVkID0gc3RhdHVzO1xuICB9XG59XG4iXX0=