"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("class-transformer");
const rescue_center_1 = require("../core/rescue.center");
const manager_command_1 = require("../command/manager.command");
const sender_1 = require("./../core/sender");
const cooldown_model_1 = require("../models/cooldown.model");
class ResponseHandler {
    static Get(message, command) {
        manager_command_1.CommandManager.Validate(command)
            .then(cmd => {
            cooldown_model_1.Cooldown.Get(cmd, message.member.user).then(cooldown => {
                cooldown
                    .Register(message)
                    .then(() => {
                    const parameter = command.Parameter;
                    const paramRequired = cmd.ParameterRequired;
                    if (cmd.CanHaveMention &&
                        message.mentions !== null &&
                        message.mentions !== undefined) {
                        cmd.Function.Execute(message, command, cmd.DirectMessage);
                        return;
                    }
                    else if (parameter.length === 0 && paramRequired) {
                        this.SendRescue(message, cmd.DirectMessage, cmd, command);
                        return;
                    }
                    else if (parameter.length > 0 && !paramRequired) {
                        this.SendRescue(message, cmd.DirectMessage, cmd, command);
                        return;
                    }
                    else {
                        if (cmd.Function !== null) {
                            if (cmd.DevOnly === true &&
                                message.author.id === "442621672714010625") {
                                cmd.Function.Execute(message, command, cmd.DirectMessage);
                                return;
                            }
                            cmd.Function.Execute(message, command, cmd.DirectMessage);
                            return;
                        }
                    }
                    return;
                })
                    .catch((response) => {
                    message.channel.send(response.content).then(($m) => {
                        cooldown.Respond($m).then(() => {
                            if (message.deletable) {
                                message.delete();
                            }
                            setTimeout(() => {
                                $m.delete();
                            }, response.timeout);
                        });
                    });
                });
            });
        })
            .catch((err) => {
            message.reply(err.message);
        });
    }
    static SendRescue(message, dm, botCommand, command) {
        rescue_center_1.RescueCenter.RequireParameter(message, botCommand, command).then(embed => {
            sender_1.Sender.SendInfo(message, embed, dm);
        });
    }
}
exports.ResponseHandler = ResponseHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2UuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oYW5kbGVycy9yZXNwb25zZS5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNEJBQTBCO0FBRTFCLDZCQUEyQjtBQUczQix5REFBcUQ7QUFDckQsZ0VBQTREO0FBQzVELDZDQUEwQztBQUMxQyw2REFBc0U7QUFFdEUsTUFBYSxlQUFlO0lBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxPQUFpQjtRQUNuRCxnQ0FBYyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7YUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1YseUJBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNyRCxRQUFRO3FCQUNMLFFBQVEsQ0FBQyxPQUFPLENBQUM7cUJBQ2pCLElBQUksQ0FBQyxHQUFHLEVBQUU7b0JBQ1QsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztvQkFDcEMsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLGlCQUFpQixDQUFDO29CQUM1QyxJQUNFLEdBQUcsQ0FBQyxjQUFjO3dCQUNsQixPQUFPLENBQUMsUUFBUSxLQUFLLElBQUk7d0JBQ3pCLE9BQU8sQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUM5Qjt3QkFDQSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQzt3QkFDMUQsT0FBTztxQkFDUjt5QkFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLGFBQWEsRUFBRTt3QkFDbEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7d0JBQzFELE9BQU87cUJBQ1I7eUJBQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTt3QkFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7d0JBQzFELE9BQU87cUJBQ1I7eUJBQU07d0JBQ0wsSUFBSSxHQUFHLENBQUMsUUFBUSxLQUFLLElBQUksRUFBRTs0QkFDekIsSUFDRSxHQUFHLENBQUMsT0FBTyxLQUFLLElBQUk7Z0NBQ3BCLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLG9CQUFvQixFQUMxQztnQ0FDQSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQ0FDMUQsT0FBTzs2QkFDUjs0QkFDRCxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQzs0QkFDMUQsT0FBTzt5QkFDUjtxQkFDRjtvQkFDRCxPQUFPO2dCQUNULENBQUMsQ0FBQztxQkFDRCxLQUFLLENBQUMsQ0FBQyxRQUEwQixFQUFFLEVBQUU7b0JBQ3BDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFXLEVBQUUsRUFBRTt3QkFDMUQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFOzRCQUM3QixJQUFJLE9BQU8sQ0FBQyxTQUFTLEVBQUU7Z0NBQ3JCLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQzs2QkFDbEI7NEJBQ0QsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQ0FDZCxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7NEJBQ2QsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzt3QkFDdkIsQ0FBQyxDQUFDLENBQUM7b0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLEdBQVUsRUFBRSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLE1BQU0sQ0FBQyxVQUFVLENBQ3ZCLE9BQWdCLEVBQ2hCLEVBQVcsRUFDWCxVQUFzQixFQUN0QixPQUFpQjtRQUVqQiw0QkFBWSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZFLGVBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQW5FRCwwQ0FtRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhXCI7XG5pbXBvcnQgeyBCb3RDb21tYW5kIH0gZnJvbSBcIi4vLi4vY29tbWFuZC9ib3QuY29tbWFuZFwiO1xuaW1wb3J0IFwiY2xhc3MtdHJhbnNmb3JtZXJcIjtcbmltcG9ydCB7IElDb21tYW5kIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY29tbWFuZC5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IHsgUmVzY3VlQ2VudGVyIH0gZnJvbSBcIi4uL2NvcmUvcmVzY3VlLmNlbnRlclwiO1xuaW1wb3J0IHsgQ29tbWFuZE1hbmFnZXIgfSBmcm9tIFwiLi4vY29tbWFuZC9tYW5hZ2VyLmNvbW1hbmRcIjtcbmltcG9ydCB7IFNlbmRlciB9IGZyb20gXCIuLy4uL2NvcmUvc2VuZGVyXCI7XG5pbXBvcnQgeyBDb29sZG93biwgQ29vbGRvd25SZXNwb25zZSB9IGZyb20gXCIuLi9tb2RlbHMvY29vbGRvd24ubW9kZWxcIjtcblxuZXhwb3J0IGNsYXNzIFJlc3BvbnNlSGFuZGxlciB7XG4gIHB1YmxpYyBzdGF0aWMgR2V0KG1lc3NhZ2U6IE1lc3NhZ2UsIGNvbW1hbmQ6IElDb21tYW5kKSB7XG4gICAgQ29tbWFuZE1hbmFnZXIuVmFsaWRhdGUoY29tbWFuZClcbiAgICAgIC50aGVuKGNtZCA9PiB7XG4gICAgICAgIENvb2xkb3duLkdldChjbWQsIG1lc3NhZ2UubWVtYmVyLnVzZXIpLnRoZW4oY29vbGRvd24gPT4ge1xuICAgICAgICAgIGNvb2xkb3duXG4gICAgICAgICAgICAuUmVnaXN0ZXIobWVzc2FnZSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVyID0gY29tbWFuZC5QYXJhbWV0ZXI7XG4gICAgICAgICAgICAgIGNvbnN0IHBhcmFtUmVxdWlyZWQgPSBjbWQuUGFyYW1ldGVyUmVxdWlyZWQ7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjbWQuQ2FuSGF2ZU1lbnRpb24gJiZcbiAgICAgICAgICAgICAgICBtZXNzYWdlLm1lbnRpb25zICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5tZW50aW9ucyAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNtZC5GdW5jdGlvbi5FeGVjdXRlKG1lc3NhZ2UsIGNvbW1hbmQsIGNtZC5EaXJlY3RNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW1ldGVyLmxlbmd0aCA9PT0gMCAmJiBwYXJhbVJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5TZW5kUmVzY3VlKG1lc3NhZ2UsIGNtZC5EaXJlY3RNZXNzYWdlLCBjbWQsIGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbWV0ZXIubGVuZ3RoID4gMCAmJiAhcGFyYW1SZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuU2VuZFJlc2N1ZShtZXNzYWdlLCBjbWQuRGlyZWN0TWVzc2FnZSwgY21kLCBjb21tYW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGNtZC5GdW5jdGlvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBjbWQuRGV2T25seSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmF1dGhvci5pZCA9PT0gXCI0NDI2MjE2NzI3MTQwMTA2MjVcIlxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNtZC5GdW5jdGlvbi5FeGVjdXRlKG1lc3NhZ2UsIGNvbW1hbmQsIGNtZC5EaXJlY3RNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY21kLkZ1bmN0aW9uLkV4ZWN1dGUobWVzc2FnZSwgY29tbWFuZCwgY21kLkRpcmVjdE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChyZXNwb25zZTogQ29vbGRvd25SZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICBtZXNzYWdlLmNoYW5uZWwuc2VuZChyZXNwb25zZS5jb250ZW50KS50aGVuKCgkbTogTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvb2xkb3duLlJlc3BvbmQoJG0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVsZXRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgJG0uZGVsZXRlKCk7XG4gICAgICAgICAgICAgICAgICB9LCByZXNwb25zZS50aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiB7XG4gICAgICAgIG1lc3NhZ2UucmVwbHkoZXJyLm1lc3NhZ2UpO1xuICAgICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXRpYyBTZW5kUmVzY3VlKFxuICAgIG1lc3NhZ2U6IE1lc3NhZ2UsXG4gICAgZG06IGJvb2xlYW4sXG4gICAgYm90Q29tbWFuZDogQm90Q29tbWFuZCxcbiAgICBjb21tYW5kOiBJQ29tbWFuZFxuICApIHtcbiAgICBSZXNjdWVDZW50ZXIuUmVxdWlyZVBhcmFtZXRlcihtZXNzYWdlLCBib3RDb21tYW5kLCBjb21tYW5kKS50aGVuKGVtYmVkID0+IHtcbiAgICAgIFNlbmRlci5TZW5kSW5mbyhtZXNzYWdlLCBlbWJlZCwgZG0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=