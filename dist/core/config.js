"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Config {
    static get BOT_NAME() {
        return process.env.BOT_NAME || require("../extras/env").env.BOT_NAME;
    }
    static get BOT_TOKEN() {
        return process.env.BOT_TOKEN || require("../extras/env").env.BOT_TOKEN;
    }
    static get COMMAND_PREFIX() {
        return (process.env.COMMAND_PREFIX || require("../extras/env").env.COMMAND_PREFIX);
    }
    static get MONGO_BASE() {
        return process.env.MONGO_BASE || require("../extras/env").env.MONGO_BASE;
    }
    static get MONGO_DATABASE() {
        return (process.env.MONGO_DATABASE || require("../extras/env").env.MONGO_DATABASE);
    }
    static get MAL_PROFILE_BASE() {
        return (process.env.MAL_PROFILE_BASE ||
            require("../extras/env").env.MAL_PROFILE_BASE);
    }
    static get MAL_ANIME_BASE() {
        return (process.env.MAL_ANIME_BASE || require("../extras/env").env.MAL_ANIME_BASE);
    }
    static get ANI_ANIME_BASE() {
        return (process.env.ANI_ANIME_BASE || require("../extras/env").env.ANI_ANIME_BASE);
    }
    static MAL_CW_LINK(username) {
        const base = process.env.MAL_CW_BASE || require("../extras/env").env.MAL_CW_BASE;
        return `${base}/${username}/load.json?status=1`;
    }
    static FIREBASE_CONFIG() {
        return (process.env.FIREBASE_CONFIG ||
            require("../extras/env").env.FIREBASE_CONFIG);
    }
    static get DBL_TOKEN() {
        return process.env.DBL_TOKEN || require("../extras/env").env.DBL_TOKEN;
    }
    static get DBL_BOT_LINK() {
        return (process.env.DBL_BOT_LINK || require("../extras/env").env.DBL_BOT_LINK);
    }
    static get QUEUE_REFRESH_RATE() {
        return Number(process.env.QUEUE_REFRESH_RATE ||
            require("../extras/env").env.QUEUE_REFRESH_RATE);
    }
    static get CACHE_UPDATE_INTERVAL() {
        return Number(process.env.CACHE_UPDATE_INTERVAL ||
            require("../extras/env").env.CACHE_UPDATE_INTERVAL);
    }
}
exports.Config = Config;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsTUFBYSxNQUFNO0lBQ1YsTUFBTSxLQUFLLFFBQVE7UUFDeEIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztJQUN2RSxDQUFDO0lBQ00sTUFBTSxLQUFLLFNBQVM7UUFDekIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUN6RSxDQUFDO0lBRU0sTUFBTSxLQUFLLGNBQWM7UUFDOUIsT0FBTyxDQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUMxRSxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sS0FBSyxVQUFVO1FBQzFCLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDM0UsQ0FBQztJQUVNLE1BQU0sS0FBSyxjQUFjO1FBQzlCLE9BQU8sQ0FDTCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FDMUUsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLEtBQUssZ0JBQWdCO1FBQ2hDLE9BQU8sQ0FDTCxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQjtZQUM1QixPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUM5QyxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sS0FBSyxjQUFjO1FBQzlCLE9BQU8sQ0FDTCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FDMUUsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLEtBQUssY0FBYztRQUM5QixPQUFPLENBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQzFFLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFnQjtRQUN4QyxNQUFNLElBQUksR0FDUixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQztRQUN0RSxPQUFPLEdBQUcsSUFBSSxJQUFJLFFBQVEscUJBQXFCLENBQUM7SUFDbEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxlQUFlO1FBQzNCLE9BQU8sQ0FDTCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWU7WUFDM0IsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQzdDLENBQUM7SUFDSixDQUFDO0lBRU0sTUFBTSxLQUFLLFNBQVM7UUFDekIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztJQUN6RSxDQUFDO0lBRU0sTUFBTSxLQUFLLFlBQVk7UUFDNUIsT0FBTyxDQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUN0RSxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sS0FBSyxrQkFBa0I7UUFDbEMsT0FBTyxNQUFNLENBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7WUFDNUIsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FDbEQsQ0FBQztJQUNKLENBQUM7SUFFTSxNQUFNLEtBQUsscUJBQXFCO1FBQ3JDLE9BQU8sTUFBTSxDQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCO1lBQy9CLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQ3JELENBQUM7SUFDSixDQUFDO0NBQ0Y7QUEvRUQsd0JBK0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUZpcmViYXNlQ29uZmlnIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvZmlyZWJhc2UuY29uZmlnLmludGVyZmFjZVwiO1xuZXhwb3J0IGNsYXNzIENvbmZpZyB7XG4gIHB1YmxpYyBzdGF0aWMgZ2V0IEJPVF9OQU1FKCkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5CT1RfTkFNRSB8fCByZXF1aXJlKFwiLi4vZXh0cmFzL2VudlwiKS5lbnYuQk9UX05BTUU7XG4gIH1cbiAgcHVibGljIHN0YXRpYyBnZXQgQk9UX1RPS0VOKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LkJPVF9UT0tFTiB8fCByZXF1aXJlKFwiLi4vZXh0cmFzL2VudlwiKS5lbnYuQk9UX1RPS0VOO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgQ09NTUFORF9QUkVGSVgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKFxuICAgICAgcHJvY2Vzcy5lbnYuQ09NTUFORF9QUkVGSVggfHwgcmVxdWlyZShcIi4uL2V4dHJhcy9lbnZcIikuZW52LkNPTU1BTkRfUFJFRklYXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IE1PTkdPX0JBU0UoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTU9OR09fQkFTRSB8fCByZXF1aXJlKFwiLi4vZXh0cmFzL2VudlwiKS5lbnYuTU9OR09fQkFTRTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IE1PTkdPX0RBVEFCQVNFKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIChcbiAgICAgIHByb2Nlc3MuZW52Lk1PTkdPX0RBVEFCQVNFIHx8IHJlcXVpcmUoXCIuLi9leHRyYXMvZW52XCIpLmVudi5NT05HT19EQVRBQkFTRVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldCBNQUxfUFJPRklMRV9CQVNFKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIChcbiAgICAgIHByb2Nlc3MuZW52Lk1BTF9QUk9GSUxFX0JBU0UgfHxcbiAgICAgIHJlcXVpcmUoXCIuLi9leHRyYXMvZW52XCIpLmVudi5NQUxfUFJPRklMRV9CQVNFXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IE1BTF9BTklNRV9CQVNFKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIChcbiAgICAgIHByb2Nlc3MuZW52Lk1BTF9BTklNRV9CQVNFIHx8IHJlcXVpcmUoXCIuLi9leHRyYXMvZW52XCIpLmVudi5NQUxfQU5JTUVfQkFTRVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldCBBTklfQU5JTUVfQkFTRSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAoXG4gICAgICBwcm9jZXNzLmVudi5BTklfQU5JTUVfQkFTRSB8fCByZXF1aXJlKFwiLi4vZXh0cmFzL2VudlwiKS5lbnYuQU5JX0FOSU1FX0JBU0VcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBNQUxfQ1dfTElOSyh1c2VybmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgYmFzZSA9XG4gICAgICBwcm9jZXNzLmVudi5NQUxfQ1dfQkFTRSB8fCByZXF1aXJlKFwiLi4vZXh0cmFzL2VudlwiKS5lbnYuTUFMX0NXX0JBU0U7XG4gICAgcmV0dXJuIGAke2Jhc2V9LyR7dXNlcm5hbWV9L2xvYWQuanNvbj9zdGF0dXM9MWA7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIEZJUkVCQVNFX0NPTkZJRygpOiBJRmlyZWJhc2VDb25maWcge1xuICAgIHJldHVybiAoXG4gICAgICBwcm9jZXNzLmVudi5GSVJFQkFTRV9DT05GSUcgfHxcbiAgICAgIHJlcXVpcmUoXCIuLi9leHRyYXMvZW52XCIpLmVudi5GSVJFQkFTRV9DT05GSUdcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgREJMX1RPS0VOKCkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5EQkxfVE9LRU4gfHwgcmVxdWlyZShcIi4uL2V4dHJhcy9lbnZcIikuZW52LkRCTF9UT0tFTjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ2V0IERCTF9CT1RfTElOSygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgcHJvY2Vzcy5lbnYuREJMX0JPVF9MSU5LIHx8IHJlcXVpcmUoXCIuLi9leHRyYXMvZW52XCIpLmVudi5EQkxfQk9UX0xJTktcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZXQgUVVFVUVfUkVGUkVTSF9SQVRFKCkge1xuICAgIHJldHVybiBOdW1iZXIoXG4gICAgICBwcm9jZXNzLmVudi5RVUVVRV9SRUZSRVNIX1JBVEUgfHxcbiAgICAgICAgcmVxdWlyZShcIi4uL2V4dHJhcy9lbnZcIikuZW52LlFVRVVFX1JFRlJFU0hfUkFURVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdldCBDQUNIRV9VUERBVEVfSU5URVJWQUwoKSB7XG4gICAgcmV0dXJuIE51bWJlcihcbiAgICAgIHByb2Nlc3MuZW52LkNBQ0hFX1VQREFURV9JTlRFUlZBTCB8fFxuICAgICAgICByZXF1aXJlKFwiLi4vZXh0cmFzL2VudlwiKS5lbnYuQ0FDSEVfVVBEQVRFX0lOVEVSVkFMXG4gICAgKTtcbiAgfVxufVxuIl19