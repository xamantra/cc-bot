"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_data_1 = require("./../../data/subscription.data");
const user_data_1 = require("../../data/user.data");
const media_list_handler_1 = require("../../handlers/media.list.handler");
const search_list_1 = require("../../core/search.list");
const title_helper_1 = require("../../helpers/title.helper");
const sender_1 = require("./../../core/sender");
const anime_cache_1 = require("../../core/anime.cache");
class UnsubFunction {
    async Execute(message, command, dm) {
        await this.Search(message, command, dm);
    }
    async Search(message, command, dm) {
        const title = command.Parameter;
        let media = [];
        const discordId = message.author.id;
        const userMedia = [];
        const filteredMedia = [];
        const formattedResults = [];
        const user = await user_data_1.UserData.GetUser(discordId);
        if (user === null)
            return;
        anime_cache_1.AnimeCache.Search(command.Parameter)
            .then(async (res) => {
            media = res;
            await subscription_data_1.SubscriptionData.All.forEach(async (sub) => {
                if (sub.UserId === user.Id) {
                    await userMedia.push(sub.MediaId);
                }
            });
            await media.forEach(async (m) => {
                if (userMedia.includes(m.idMal)) {
                    await filteredMedia.push(m);
                    await formattedResults.push(media_list_handler_1.MediaFormatHandler.Get(m));
                }
            });
            if (filteredMedia.length === 0) {
                sender_1.Sender.SendInfo(message, `Hmm..It seems that you are not subscribe to any anime that matches your keyword  ***${title}***.`, dm);
            }
            else if (filteredMedia.length === 1) {
                await subscription_data_1.SubscriptionData.Delete(filteredMedia[0].idMal, discordId);
                sender_1.Sender.SendInfo(message, `You are now unsubscribed from  ***${title_helper_1.TitleHelper.Get(filteredMedia[0].title)}***`, dm);
            }
            else {
                const embed = await search_list_1.SearchList.Embed(message, command, formattedResults);
                sender_1.Sender.SendInfo(message, embed, dm);
            }
        })
            .catch(() => {
            sender_1.Sender.Send(message, `Ge mo nasai! I didn't find anime that matches your keyword \`${command.Parameter}\``, dm);
            console.warn(`Error while searching : [MediaSearch.All(${command.Parameter})]`);
        });
    }
}
exports.UnsubFunction = UnsubFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zdWIuY29tbWFuZC5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kL2Z1bmN0aW9ucy91bnN1Yi5jb21tYW5kLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0VBQWtFO0FBSWxFLG9EQUFnRDtBQUNoRCwwRUFBdUU7QUFDdkUsd0RBQW9EO0FBQ3BELDZEQUF5RDtBQUN6RCxnREFBNkM7QUFFN0Msd0RBQW9EO0FBRXBELE1BQWEsYUFBYTtJQUNqQixLQUFLLENBQUMsT0FBTyxDQUNsQixPQUFpQixFQUNqQixPQUFrQixFQUNsQixFQUFZO1FBRVosTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBaUIsRUFBRSxPQUFrQixFQUFFLEVBQVk7UUFDdEUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNoQyxJQUFJLEtBQUssR0FBYSxFQUFFLENBQUM7UUFDekIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDcEMsTUFBTSxTQUFTLEdBQWEsRUFBRSxDQUFDO1FBQy9CLE1BQU0sYUFBYSxHQUFhLEVBQUUsQ0FBQztRQUNuQyxNQUFNLGdCQUFnQixHQUFVLEVBQUUsQ0FBQztRQUNuQyxNQUFNLElBQUksR0FBRyxNQUFNLG9CQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksSUFBSSxLQUFLLElBQUk7WUFBRSxPQUFPO1FBQzFCLHdCQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDakMsSUFBSSxDQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsRUFBRTtZQUNoQixLQUFLLEdBQUcsR0FBRyxDQUFDO1lBQ1osTUFBTSxvQ0FBZ0IsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBQyxHQUFHLEVBQUMsRUFBRTtnQkFDN0MsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFNLElBQWEsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7aUJBQ25DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFDLENBQUMsRUFBQyxFQUFFO2dCQUM1QixJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUMvQixNQUFNLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLHVDQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN4RDtZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDOUIsZUFBTSxDQUFDLFFBQVEsQ0FDYixPQUFPLEVBQ1AsdUZBQXVGLEtBQUssTUFBTSxFQUNsRyxFQUFFLENBQ0gsQ0FBQzthQUNIO2lCQUFNLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3JDLE1BQU0sb0NBQWdCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7Z0JBQ2pFLGVBQU0sQ0FBQyxRQUFRLENBQ2IsT0FBTyxFQUNQLHFDQUFxQywwQkFBVyxDQUFDLEdBQUcsQ0FDbEQsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FDdkIsS0FBSyxFQUNOLEVBQUUsQ0FDSCxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsTUFBTSxLQUFLLEdBQUcsTUFBTSx3QkFBVSxDQUFDLEtBQUssQ0FDbEMsT0FBTyxFQUNQLE9BQU8sRUFDUCxnQkFBZ0IsQ0FDakIsQ0FBQztnQkFDRixlQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDckM7UUFDSCxDQUFDLENBQUM7YUFDRCxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1YsZUFBTSxDQUFDLElBQUksQ0FDVCxPQUFPLEVBQ1AsZ0VBQ0UsT0FBTyxDQUFDLFNBQ1YsSUFBSSxFQUNKLEVBQUUsQ0FDSCxDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FDViw0Q0FBNEMsT0FBTyxDQUFDLFNBQVMsSUFBSSxDQUNsRSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0Y7QUFyRUQsc0NBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbW1hbmRGdW5jdGlvbiB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2NvbW1hbmQuZnVuY3Rpb24uaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25EYXRhIH0gZnJvbSBcIi4vLi4vLi4vZGF0YS9zdWJzY3JpcHRpb24uZGF0YVwiO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XG5pbXBvcnQgeyBJQ29tbWFuZCB9IGZyb20gXCIuLi8uLi9pbnRlcmZhY2VzL2NvbW1hbmQuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBJTWVkaWEgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9wYWdlLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgVXNlckRhdGEgfSBmcm9tIFwiLi4vLi4vZGF0YS91c2VyLmRhdGFcIjtcbmltcG9ydCB7IE1lZGlhRm9ybWF0SGFuZGxlciB9IGZyb20gXCIuLi8uLi9oYW5kbGVycy9tZWRpYS5saXN0LmhhbmRsZXJcIjtcbmltcG9ydCB7IFNlYXJjaExpc3QgfSBmcm9tIFwiLi4vLi4vY29yZS9zZWFyY2gubGlzdFwiO1xuaW1wb3J0IHsgVGl0bGVIZWxwZXIgfSBmcm9tIFwiLi4vLi4vaGVscGVycy90aXRsZS5oZWxwZXJcIjtcbmltcG9ydCB7IFNlbmRlciB9IGZyb20gXCIuLy4uLy4uL2NvcmUvc2VuZGVyXCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uLy4uL21vZGVscy9zdWJzY3JpcHRpb24ubW9kZWxcIjtcbmltcG9ydCB7IEFuaW1lQ2FjaGUgfSBmcm9tIFwiLi4vLi4vY29yZS9hbmltZS5jYWNoZVwiO1xuXG5leHBvcnQgY2xhc3MgVW5zdWJGdW5jdGlvbiBpbXBsZW1lbnRzIElDb21tYW5kRnVuY3Rpb24ge1xuICBwdWJsaWMgYXN5bmMgRXhlY3V0ZShcbiAgICBtZXNzYWdlPzogTWVzc2FnZSxcbiAgICBjb21tYW5kPzogSUNvbW1hbmQsXG4gICAgZG0/OiBib29sZWFuXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMuU2VhcmNoKG1lc3NhZ2UsIGNvbW1hbmQsIGRtKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgU2VhcmNoKG1lc3NhZ2U/OiBNZXNzYWdlLCBjb21tYW5kPzogSUNvbW1hbmQsIGRtPzogYm9vbGVhbikge1xuICAgIGNvbnN0IHRpdGxlID0gY29tbWFuZC5QYXJhbWV0ZXI7XG4gICAgbGV0IG1lZGlhOiBJTWVkaWFbXSA9IFtdO1xuICAgIGNvbnN0IGRpc2NvcmRJZCA9IG1lc3NhZ2UuYXV0aG9yLmlkO1xuICAgIGNvbnN0IHVzZXJNZWRpYTogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBmaWx0ZXJlZE1lZGlhOiBJTWVkaWFbXSA9IFtdO1xuICAgIGNvbnN0IGZvcm1hdHRlZFJlc3VsdHM6IGFueVtdID0gW107XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJEYXRhLkdldFVzZXIoZGlzY29yZElkKTtcbiAgICBpZiAodXNlciA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIEFuaW1lQ2FjaGUuU2VhcmNoKGNvbW1hbmQuUGFyYW1ldGVyKVxuICAgICAgLnRoZW4oYXN5bmMgcmVzID0+IHtcbiAgICAgICAgbWVkaWEgPSByZXM7XG4gICAgICAgIGF3YWl0IFN1YnNjcmlwdGlvbkRhdGEuQWxsLmZvckVhY2goYXN5bmMgc3ViID0+IHtcbiAgICAgICAgICBpZiAoc3ViLlVzZXJJZCA9PT0gKHVzZXIgYXMgVXNlcikuSWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHVzZXJNZWRpYS5wdXNoKHN1Yi5NZWRpYUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCBtZWRpYS5mb3JFYWNoKGFzeW5jIG0gPT4ge1xuICAgICAgICAgIGlmICh1c2VyTWVkaWEuaW5jbHVkZXMobS5pZE1hbCkpIHtcbiAgICAgICAgICAgIGF3YWl0IGZpbHRlcmVkTWVkaWEucHVzaChtKTtcbiAgICAgICAgICAgIGF3YWl0IGZvcm1hdHRlZFJlc3VsdHMucHVzaChNZWRpYUZvcm1hdEhhbmRsZXIuR2V0KG0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZmlsdGVyZWRNZWRpYS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBTZW5kZXIuU2VuZEluZm8oXG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgYEhtbS4uSXQgc2VlbXMgdGhhdCB5b3UgYXJlIG5vdCBzdWJzY3JpYmUgdG8gYW55IGFuaW1lIHRoYXQgbWF0Y2hlcyB5b3VyIGtleXdvcmQgICoqKiR7dGl0bGV9KioqLmAsXG4gICAgICAgICAgICBkbVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyZWRNZWRpYS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBhd2FpdCBTdWJzY3JpcHRpb25EYXRhLkRlbGV0ZShmaWx0ZXJlZE1lZGlhWzBdLmlkTWFsLCBkaXNjb3JkSWQpO1xuICAgICAgICAgIFNlbmRlci5TZW5kSW5mbyhcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICBgWW91IGFyZSBub3cgdW5zdWJzY3JpYmVkIGZyb20gICoqKiR7VGl0bGVIZWxwZXIuR2V0KFxuICAgICAgICAgICAgICBmaWx0ZXJlZE1lZGlhWzBdLnRpdGxlXG4gICAgICAgICAgICApfSoqKmAsXG4gICAgICAgICAgICBkbVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgZW1iZWQgPSBhd2FpdCBTZWFyY2hMaXN0LkVtYmVkKFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICBmb3JtYXR0ZWRSZXN1bHRzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBTZW5kZXIuU2VuZEluZm8obWVzc2FnZSwgZW1iZWQsIGRtKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIFNlbmRlci5TZW5kKFxuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgYEdlIG1vIG5hc2FpISBJIGRpZG4ndCBmaW5kIGFuaW1lIHRoYXQgbWF0Y2hlcyB5b3VyIGtleXdvcmQgXFxgJHtcbiAgICAgICAgICAgIGNvbW1hbmQuUGFyYW1ldGVyXG4gICAgICAgICAgfVxcYGAsXG4gICAgICAgICAgZG1cbiAgICAgICAgKTtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBFcnJvciB3aGlsZSBzZWFyY2hpbmcgOiBbTWVkaWFTZWFyY2guQWxsKCR7Y29tbWFuZC5QYXJhbWV0ZXJ9KV1gXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgfVxufVxuIl19