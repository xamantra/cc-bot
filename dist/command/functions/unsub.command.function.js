"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const subscription_data_1 = require("./../../data/subscription.data");
const user_data_1 = require("../../data/user.data");
const media_list_handler_1 = require("../../handlers/media.list.handler");
const search_list_1 = require("../../core/search.list");
const title_helper_1 = require("../../helpers/title.helper");
const sender_1 = require("./../../core/sender");
const anime_cache_1 = require("../../core/anime.cache");
class UnsubFunction {
    async Execute(message, command, dm) {
        await this.Search(message, command, dm);
    }
    async Search(message, command, dm) {
        const title = command.Parameter;
        const discordId = message.author.id;
        const userMedia = [];
        const filteredMedia = [];
        const formattedResults = [];
        const user = await user_data_1.UserData.GetUser(discordId);
        if (user === null) {
            sender_1.Sender.SendError(message, dm);
            return;
        }
        const media = await anime_cache_1.AnimeCache.Search(command.Parameter);
        await subscription_data_1.SubscriptionData.All.forEach(async (sub) => {
            if (sub.UserId === user.Id) {
                await userMedia.push(sub.MediaId);
            }
        });
        await media.forEach(async (m) => {
            if (userMedia.includes(m.idMal)) {
                await filteredMedia.push(m);
                await formattedResults.push(media_list_handler_1.MediaFormatHandler.Get(m));
            }
        });
        if (filteredMedia.length === 0) {
            sender_1.Sender.SendInfo(message, `Hmm..It seems that you are not subscribe to any anime that matches your keyword  ***${title}***.`, dm);
        }
        else if (filteredMedia.length === 1) {
            await subscription_data_1.SubscriptionData.Delete(filteredMedia[0].idMal, discordId);
            sender_1.Sender.SendInfo(message, `You are now unsubscribed from  ***${title_helper_1.TitleHelper.Get(filteredMedia[0].title)}***`, dm);
        }
        else {
            const embed = await search_list_1.SearchList.Embed(message, command, formattedResults);
            sender_1.Sender.SendInfo(message, embed, dm);
        }
    }
}
exports.UnsubFunction = UnsubFunction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zdWIuY29tbWFuZC5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kL2Z1bmN0aW9ucy91bnN1Yi5jb21tYW5kLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esc0VBQWtFO0FBSWxFLG9EQUFnRDtBQUNoRCwwRUFBdUU7QUFDdkUsd0RBQW9EO0FBQ3BELDZEQUF5RDtBQUN6RCxnREFBNkM7QUFFN0Msd0RBQW9EO0FBRXBELE1BQWEsYUFBYTtJQUNqQixLQUFLLENBQUMsT0FBTyxDQUNsQixPQUFpQixFQUNqQixPQUFrQixFQUNsQixFQUFZO1FBRVosTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVPLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBaUIsRUFBRSxPQUFrQixFQUFFLEVBQVk7UUFDdEUsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUNoQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFNBQVMsR0FBYSxFQUFFLENBQUM7UUFDL0IsTUFBTSxhQUFhLEdBQWEsRUFBRSxDQUFDO1FBQ25DLE1BQU0sZ0JBQWdCLEdBQVUsRUFBRSxDQUFDO1FBQ25DLE1BQU0sSUFBSSxHQUFHLE1BQU0sb0JBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0MsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQ2pCLGVBQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLE9BQU87U0FDUjtRQUNELE1BQU0sS0FBSyxHQUFHLE1BQU0sd0JBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sb0NBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsR0FBRyxFQUFDLEVBQUU7WUFDN0MsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFNLElBQWEsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BDLE1BQU0sU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbkM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE1BQU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsQ0FBQyxFQUFDLEVBQUU7WUFDNUIsSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixNQUFNLGdCQUFnQixDQUFDLElBQUksQ0FBQyx1Q0FBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4RDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM5QixlQUFNLENBQUMsUUFBUSxDQUNiLE9BQU8sRUFDUCx1RkFBdUYsS0FBSyxNQUFNLEVBQ2xHLEVBQUUsQ0FDSCxDQUFDO1NBQ0g7YUFBTSxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3JDLE1BQU0sb0NBQWdCLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDakUsZUFBTSxDQUFDLFFBQVEsQ0FDYixPQUFPLEVBQ1AscUNBQXFDLDBCQUFXLENBQUMsR0FBRyxDQUNsRCxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUN2QixLQUFLLEVBQ04sRUFBRSxDQUNILENBQUM7U0FDSDthQUFNO1lBQ0wsTUFBTSxLQUFLLEdBQUcsTUFBTSx3QkFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDekUsZUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztDQUNGO0FBcERELHNDQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21tYW5kRnVuY3Rpb24gfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb21tYW5kLmZ1bmN0aW9uLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uRGF0YSB9IGZyb20gXCIuLy4uLy4uL2RhdGEvc3Vic2NyaXB0aW9uLmRhdGFcIjtcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xuaW1wb3J0IHsgSUNvbW1hbmQgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb21tYW5kLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSU1lZGlhIH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvcGFnZS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFVzZXJEYXRhIH0gZnJvbSBcIi4uLy4uL2RhdGEvdXNlci5kYXRhXCI7XG5pbXBvcnQgeyBNZWRpYUZvcm1hdEhhbmRsZXIgfSBmcm9tIFwiLi4vLi4vaGFuZGxlcnMvbWVkaWEubGlzdC5oYW5kbGVyXCI7XG5pbXBvcnQgeyBTZWFyY2hMaXN0IH0gZnJvbSBcIi4uLy4uL2NvcmUvc2VhcmNoLmxpc3RcIjtcbmltcG9ydCB7IFRpdGxlSGVscGVyIH0gZnJvbSBcIi4uLy4uL2hlbHBlcnMvdGl0bGUuaGVscGVyXCI7XG5pbXBvcnQgeyBTZW5kZXIgfSBmcm9tIFwiLi8uLi8uLi9jb3JlL3NlbmRlclwiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi8uLi9tb2RlbHMvc3Vic2NyaXB0aW9uLm1vZGVsXCI7XG5pbXBvcnQgeyBBbmltZUNhY2hlIH0gZnJvbSBcIi4uLy4uL2NvcmUvYW5pbWUuY2FjaGVcIjtcblxuZXhwb3J0IGNsYXNzIFVuc3ViRnVuY3Rpb24gaW1wbGVtZW50cyBJQ29tbWFuZEZ1bmN0aW9uIHtcbiAgcHVibGljIGFzeW5jIEV4ZWN1dGUoXG4gICAgbWVzc2FnZT86IE1lc3NhZ2UsXG4gICAgY29tbWFuZD86IElDb21tYW5kLFxuICAgIGRtPzogYm9vbGVhblxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLlNlYXJjaChtZXNzYWdlLCBjb21tYW5kLCBkbSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIFNlYXJjaChtZXNzYWdlPzogTWVzc2FnZSwgY29tbWFuZD86IElDb21tYW5kLCBkbT86IGJvb2xlYW4pIHtcbiAgICBjb25zdCB0aXRsZSA9IGNvbW1hbmQuUGFyYW1ldGVyO1xuICAgIGNvbnN0IGRpc2NvcmRJZCA9IG1lc3NhZ2UuYXV0aG9yLmlkO1xuICAgIGNvbnN0IHVzZXJNZWRpYTogbnVtYmVyW10gPSBbXTtcbiAgICBjb25zdCBmaWx0ZXJlZE1lZGlhOiBJTWVkaWFbXSA9IFtdO1xuICAgIGNvbnN0IGZvcm1hdHRlZFJlc3VsdHM6IGFueVtdID0gW107XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJEYXRhLkdldFVzZXIoZGlzY29yZElkKTtcbiAgICBpZiAodXNlciA9PT0gbnVsbCkge1xuICAgICAgU2VuZGVyLlNlbmRFcnJvcihtZXNzYWdlLCBkbSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lZGlhID0gYXdhaXQgQW5pbWVDYWNoZS5TZWFyY2goY29tbWFuZC5QYXJhbWV0ZXIpO1xuICAgIGF3YWl0IFN1YnNjcmlwdGlvbkRhdGEuQWxsLmZvckVhY2goYXN5bmMgc3ViID0+IHtcbiAgICAgIGlmIChzdWIuVXNlcklkID09PSAodXNlciBhcyBVc2VyKS5JZCkge1xuICAgICAgICBhd2FpdCB1c2VyTWVkaWEucHVzaChzdWIuTWVkaWFJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXdhaXQgbWVkaWEuZm9yRWFjaChhc3luYyBtID0+IHtcbiAgICAgIGlmICh1c2VyTWVkaWEuaW5jbHVkZXMobS5pZE1hbCkpIHtcbiAgICAgICAgYXdhaXQgZmlsdGVyZWRNZWRpYS5wdXNoKG0pO1xuICAgICAgICBhd2FpdCBmb3JtYXR0ZWRSZXN1bHRzLnB1c2goTWVkaWFGb3JtYXRIYW5kbGVyLkdldChtKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGZpbHRlcmVkTWVkaWEubGVuZ3RoID09PSAwKSB7XG4gICAgICBTZW5kZXIuU2VuZEluZm8oXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGBIbW0uLkl0IHNlZW1zIHRoYXQgeW91IGFyZSBub3Qgc3Vic2NyaWJlIHRvIGFueSBhbmltZSB0aGF0IG1hdGNoZXMgeW91ciBrZXl3b3JkICAqKioke3RpdGxlfSoqKi5gLFxuICAgICAgICBkbVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGZpbHRlcmVkTWVkaWEubGVuZ3RoID09PSAxKSB7XG4gICAgICBhd2FpdCBTdWJzY3JpcHRpb25EYXRhLkRlbGV0ZShmaWx0ZXJlZE1lZGlhWzBdLmlkTWFsLCBkaXNjb3JkSWQpO1xuICAgICAgU2VuZGVyLlNlbmRJbmZvKFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBgWW91IGFyZSBub3cgdW5zdWJzY3JpYmVkIGZyb20gICoqKiR7VGl0bGVIZWxwZXIuR2V0KFxuICAgICAgICAgIGZpbHRlcmVkTWVkaWFbMF0udGl0bGVcbiAgICAgICAgKX0qKipgLFxuICAgICAgICBkbVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW1iZWQgPSBhd2FpdCBTZWFyY2hMaXN0LkVtYmVkKG1lc3NhZ2UsIGNvbW1hbmQsIGZvcm1hdHRlZFJlc3VsdHMpO1xuICAgICAgU2VuZGVyLlNlbmRJbmZvKG1lc3NhZ2UsIGVtYmVkLCBkbSk7XG4gICAgfVxuICB9XG59XG4iXX0=