"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
class ClientManager {
    static async Init(client) {
        await client.login(config_1.Config.BOT_TOKEN);
        this.Client = client;
        client.on("guildCreate", guild => {
            console.log(`New server joined: ${guild.name} (Id: ${guild.id}). This server has ${guild.memberCount} members!`);
        });
        client.on("ready", () => {
            console.log(`Bot has started, with ${client.users.size} users, in ${client.channels.size} channels of ${client.guilds.size} servers.`);
        });
    }
    static GetClient() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                if (this.Client !== null && this.Client !== undefined) {
                    resolve(this.Client);
                }
            }, 100);
        });
    }
    static GetUser(discordId) {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                const user = this.Client.users.get(discordId);
                if (user !== null && user !== undefined) {
                    resolve(user);
                }
            }, 0);
            setTimeout(() => {
                reject(new Error(`Unable to get user <${discordId}>.`));
            }, 10000);
        });
    }
}
exports.ClientManager = ClientManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvcmUvY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EscUNBQWtDO0FBR2xDLE1BQWEsYUFBYTtJQUdqQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFjO1FBQ3JDLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLEVBQUU7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FDVCxzQkFBc0IsS0FBSyxDQUFDLElBQUksU0FBUyxLQUFLLENBQUMsRUFBRSxzQkFDL0MsS0FBSyxDQUFDLFdBQ1IsV0FBVyxDQUNaLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUN0QixPQUFPLENBQUMsR0FBRyxDQUNULHlCQUF5QixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksY0FDeEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUNsQixnQkFBZ0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FDOUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxTQUFTO1FBQ3JCLE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDN0MsV0FBVyxDQUFDLEdBQUcsRUFBRTtnQkFDZixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO29CQUNyRCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN0QjtZQUNILENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNWLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUI7UUFDckMsT0FBTyxJQUFJLE9BQU8sQ0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUMzQyxXQUFXLENBQUMsR0FBRyxFQUFFO2dCQUNmLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDOUMsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7b0JBQ3ZDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDZjtZQUNILENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNOLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHVCQUF1QixTQUFTLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUE5Q0Qsc0NBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50LCBVc2VyLCBDb2xsZWN0aW9uIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuaW1wb3J0IHsgQm90UHJlc2VuY2UgfSBmcm9tIFwiLi9wcmVzZW5jZVwiO1xuXG5leHBvcnQgY2xhc3MgQ2xpZW50TWFuYWdlciB7XG4gIHByaXZhdGUgc3RhdGljIENsaWVudDogQ2xpZW50O1xuXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgSW5pdChjbGllbnQ6IENsaWVudCkge1xuICAgIGF3YWl0IGNsaWVudC5sb2dpbihDb25maWcuQk9UX1RPS0VOKTtcbiAgICB0aGlzLkNsaWVudCA9IGNsaWVudDtcbiAgICBjbGllbnQub24oXCJndWlsZENyZWF0ZVwiLCBndWlsZCA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYE5ldyBzZXJ2ZXIgam9pbmVkOiAke2d1aWxkLm5hbWV9IChJZDogJHtndWlsZC5pZH0pLiBUaGlzIHNlcnZlciBoYXMgJHtcbiAgICAgICAgICBndWlsZC5tZW1iZXJDb3VudFxuICAgICAgICB9IG1lbWJlcnMhYFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGNsaWVudC5vbihcInJlYWR5XCIsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgQm90IGhhcyBzdGFydGVkLCB3aXRoICR7Y2xpZW50LnVzZXJzLnNpemV9IHVzZXJzLCBpbiAke1xuICAgICAgICAgIGNsaWVudC5jaGFubmVscy5zaXplXG4gICAgICAgIH0gY2hhbm5lbHMgb2YgJHtjbGllbnQuZ3VpbGRzLnNpemV9IHNlcnZlcnMuYFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgR2V0Q2xpZW50KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxDbGllbnQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuQ2xpZW50ICE9PSBudWxsICYmIHRoaXMuQ2xpZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXNvbHZlKHRoaXMuQ2xpZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgR2V0VXNlcihkaXNjb3JkSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxVc2VyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVzZXIgPSB0aGlzLkNsaWVudC51c2Vycy5nZXQoZGlzY29yZElkKTtcbiAgICAgICAgaWYgKHVzZXIgIT09IG51bGwgJiYgdXNlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzb2x2ZSh1c2VyKTtcbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgVW5hYmxlIHRvIGdldCB1c2VyIDwke2Rpc2NvcmRJZH0+LmApKTtcbiAgICAgIH0sIDEwMDAwKTtcbiAgICB9KTtcbiAgfVxufVxuIl19