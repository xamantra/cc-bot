"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const media_result_1 = require("../../core/media.result");
const media_handler_1 = require("../../handlers/media.handler");
const response_message_helper_1 = require("../../helpers/response.message.helper");
const sender_1 = require("../../core/sender");
const anime_cache_1 = require("../../core/anime.cache");
class MediaFunction {
    constructor() { }
    async Execute(message, command, dm) {
        await this.Handle(message, command, dm);
    }
    async Handle(message, command, isDM) {
        const color = message.member.highestRole.color;
        anime_cache_1.AnimeCache.Search(command.Parameter)
            .then(results => {
            const ongoing = media_handler_1.MediaHandler.OngoingMedia(results);
            const unreleased = media_handler_1.MediaHandler.UnreleasedMedia(results);
            const unreleasedNoDate = media_handler_1.MediaHandler.UnreleasedNoDateMedia(results);
            const completed = media_handler_1.MediaHandler.CompletedMedia(results);
            const exactMedia = media_handler_1.MediaHandler.ExactMedia(results, command.Parameter);
            if (exactMedia.length > 0) {
                const m = exactMedia[0];
                response_message_helper_1.ResponseMessageHelper.CreateMessage(m, m.status, color).then(response => {
                    media_result_1.MediaResult.SendMessage(message, isDM, response);
                });
            }
            else if (ongoing.length > 0) {
                if (ongoing.length === 1) {
                    const m = ongoing[0];
                    response_message_helper_1.ResponseMessageHelper.CreateMessage(m, m.status, color).then(response => {
                        media_result_1.MediaResult.SendMessage(message, isDM, response);
                    });
                }
                else {
                    this.SendManyResult(message, command, isDM, ongoing.length, `currently ongoing. Please try to be more specific.`);
                }
            }
            else if (unreleased.length > 0) {
                if (unreleased.length === 1) {
                    const m = unreleased[0];
                    response_message_helper_1.ResponseMessageHelper.CreateMessage(m, m.status, color).then(response => {
                        media_result_1.MediaResult.SendMessage(message, isDM, response);
                    });
                }
                else {
                    this.SendManyResult(message, command, isDM, unreleased.length, `not yet aired. Please try to be more specific.`);
                }
            }
            else if (unreleasedNoDate.length > 0) {
                if (unreleasedNoDate.length === 1) {
                    const m = unreleasedNoDate[0];
                    response_message_helper_1.ResponseMessageHelper.CreateMessage(m, m.status, color).then(response => {
                        media_result_1.MediaResult.SendMessage(message, isDM, response);
                    });
                }
                else {
                    this.SendManyResult(message, command, isDM, unreleasedNoDate.length, `not yet aired. Please try to be more specific.`);
                }
            }
            else if (completed.length > 0) {
                if (completed.length === 1) {
                    completed.forEach(async (m) => {
                        response_message_helper_1.ResponseMessageHelper.CreateMessage(m, m.status, color).then(response => {
                            media_result_1.MediaResult.SendMessage(message, isDM, response);
                        });
                    });
                }
                else {
                    this.SendManyResult(message, command, isDM, completed.length, `already completed.`);
                }
            }
            else {
                sender_1.Sender.SendInfo(message, `Go me nasai!, I didn't find anime that matches your keyword ***"${command.Parameter}"***, try checking your spelling or another keyword.`, isDM);
            }
        })
            .catch(() => {
            sender_1.Sender.SendInfo(message, `Go me nasai!, I didn't find anime that matches your keyword ***"${command.Parameter}"***, try checking your spelling or another keyword.`, isDM);
            console.warn(`Error while searching : [MediaSearch.All(${command.Parameter})]`);
        });
    }
    SendManyResult(message, command, isDM, length, type) {
        sender_1.Sender.SendInfo(message, `I found ***${length}*** anime with your keyword ***${command.Parameter}*** and all of them is ${type}`, isDM);
    }
}
exports.MediaFunction = MediaFunction;
//# sourceMappingURL=data:application/json;base64,