"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const media_search_1 = require("./media.search");
const array_helper_1 = require("../helpers/array.helper");
const random_helper_1 = require("../helpers/random.helper");
const title_helper_1 = require("../helpers/title.helper");
class AnimeCache {
    static async Update(index = 0) {
        setTimeout(async () => {
            if (this.List.length > 0) {
                const local = this.List[index];
                const fromApi = await media_search_1.MediaSearch.Find(local.idMal);
                if (fromApi !== null && fromApi !== undefined) {
                    array_helper_1.ArrayHelper.remove(this.List, local, async () => {
                        const exists = await this.Exists(fromApi.idMal);
                        if (exists === false) {
                            this.List.push(fromApi);
                            this.Check(index);
                        }
                        else {
                            this.Check(index);
                        }
                    });
                }
                else {
                    this.Check(0);
                }
            }
            else {
                this.Check(0);
            }
        }, 3000);
    }
    static Check(index) {
        if (index === this.List.length - 1) {
            this.Update(0);
        }
        else {
            this.Update(index + 1);
        }
    }
    static Exists(id) {
        return new Promise((resolve, reject) => {
            const anime = this.List.find(x => x.idMal === id);
            if (anime !== null && anime !== undefined) {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    }
    static async Get(id) {
        return new Promise(async (resolve, reject) => {
            const local = this.List.find(x => x.idMal === id);
            if (local !== null && local !== undefined) {
                resolve(local);
            }
            else {
                const fromApi = await media_search_1.MediaSearch.Find(id);
                const exists = await this.Exists(fromApi.idMal);
                if (exists === false)
                    this.List.push(fromApi);
                resolve(fromApi);
            }
        });
    }
    static GetRandom() {
        return new Promise((resolve, reject) => {
            setInterval(() => {
                const anime = this.List[random_helper_1.Random.Range(0, this.List.length - 1)];
                if (anime !== null && anime !== undefined) {
                    resolve(anime);
                }
            }, 1);
        });
    }
    static async Search(keyword) {
        return new Promise(async (resolve, reject) => {
            const found = [];
            const length = this.List.length;
            if (length === 0) {
                const apiResult = await media_search_1.MediaSearch.All(keyword);
                if (apiResult.length === 0) {
                    resolve(found);
                    return;
                }
                for (let x = 0; x < apiResult.length; x++) {
                    const fromApi = apiResult[x];
                    const exists = await this.Exists(fromApi.idMal);
                    if (exists === false)
                        this.List.push(fromApi);
                    if (x === apiResult.length - 1)
                        resolve(apiResult);
                }
            }
            for (let i = 0; i < length; i++) {
                const anime = this.List[i];
                const english = anime.title.english;
                const romaji = anime.title.romaji;
                let media = null;
                if (english !== null && english !== undefined) {
                    const match = await this.ScanMatch(keyword, english);
                    if (match === true) {
                        media = anime;
                    }
                }
                if (romaji !== null && romaji !== undefined) {
                    const match = await this.ScanMatch(keyword, romaji);
                    if (match === true) {
                        media = anime;
                    }
                }
                if (media !== null)
                    found.push(media);
                if (i === length - 1) {
                    if (found.length === 0) {
                        const apiResult = await media_search_1.MediaSearch.All(keyword);
                        if (apiResult.length === 0) {
                            resolve(found);
                        }
                        for (let x = 0; x < apiResult.length; x++) {
                            const fromApi = apiResult[x];
                            const exists = await this.Exists(fromApi.idMal);
                            if (exists === false)
                                this.List.push(fromApi);
                            if (x === apiResult.length - 1)
                                resolve(apiResult);
                        }
                    }
                    else {
                        resolve(found);
                    }
                }
            }
        });
    }
    static async ScanMatch(keyword, title) {
        return new Promise(async (resolve, reject) => {
            const titleMatch = await this.ScanTitle(keyword, title);
            const acroMatch = await this.ScanAcro(keyword, title);
            if (titleMatch) {
                resolve(titleMatch);
            }
            else if (acroMatch) {
                resolve(acroMatch);
            }
            else {
                resolve(false);
            }
        });
    }
    static async ScanTitle(keyword, title) {
        return new Promise((resolve, reject) => {
            const keywords = keyword.split(/ +/g);
            let match = 0;
            for (let i = 0; i < keywords.length; i++) {
                const word = keywords[i];
                if (title.toLowerCase().includes(word)) {
                    match++;
                }
                if (i === keywords.length - 1) {
                    if (match === keyword.length) {
                        resolve(true);
                        return;
                    }
                    resolve(false);
                }
            }
        });
    }
    static async ScanAcro(keyword, title) {
        return new Promise((resolve, reject) => {
            const titleWords = title.toLowerCase().split(/ +/g);
            // acronym doesn't have space.
            if (keyword.includes(" ")) {
                resolve(false);
                return;
            }
            const acronym = keyword.replace(".", "").toLowerCase();
            let acroTitle = "";
            for (let i = 0; i < titleWords.length; i++) {
                const word = titleWords[i];
                acroTitle += `${word[0]}`;
            }
            if (acroTitle.includes(acronym)) {
                resolve(true);
            }
            else {
                resolve(false);
            }
        });
    }
    static Log() {
        for (let i = 0; i < this.List.length; i++) {
            const anime = this.List[i];
            const title = title_helper_1.TitleHelper.Get(anime.title);
            const id = anime.id;
            const malId = anime.idMal;
            const episodes = anime.episodes;
            console.log(`${i + 1}. Ids:[${id}, ${malId}], "${title}", ${episodes} episodes.`);
        }
    }
}
AnimeCache.List = [];
exports.AnimeCache = AnimeCache;
//# sourceMappingURL=data:application/json;base64,